###
# Configuration properties for the design pattern specification analyzer tool.
# First, give the tool a unique project ID. In many cases this will be the name of the project.
projectID = hobbits


# Specify the project language, including the period denoting the file type
# default value: .java
projectLanguage = .java


# Before running the tool, a working directory needs to be selected. This working directory will hold
# versions of the project you wish to have analyzed, including both the source files and compiled/runnable variants.
workingDirectory = C:\\Users\\Derek Reimanis\\Documents\\research\\behavior\\projects\\hobbits\\

# list the versions under analysis, from 0-$versions$. These need to be consecutive values. If the project does not have consecutive versions,
# you will need to map the version IDs to consecutive values.
versions = 9


#####PATTERN DETECTION
# In the working directory, create a directory that will hold the xml output from the pattern detection tool (pattern4.jar)

# default value: pattern_detections
patternDetectionOutput = pattern_detections

# Next, run the pattern detection tool (pattern4.jar) on each version of the project under analysis. Note that pattern4 uses bytecode analysis
# so you will have to find and extract the project's jar file, and point pattern4 at the directory holding the extracted .class files.
# Make sure you output the results from pattern4 under the name 'pattern_detector' with the version number immediately after the name
# The format of this output is specified below:
# Example output would be "pattern_detector0.xml", for the patterns of version 0 under this project. "pattern_detector1.xml" for version 1, etc.

# Additionally, the tool does not automatically attach a file extension to its output, so make sure the files have a .xml extension
# You can do this by renaming the file or outputting the filename with a .xml extension.
#
# This step is complete when you have a directory (named patternDetectionOutput's value) under the working directory that stores
# the xml files output from the pattern detection tool, where each file has a common name (indicated by patternDetectionCommonFileName's value)
# and the version of that file immediately follows the common name.
# Example structure:
# ~selenium
#    |- pattern_detections
#          |- pattern_detector0.xml
#          |- pattern_detector1.xml
#          |- pattern_detector2.xml
##


#####UML GENERATION
# In the working directory, create directories for each version of the project you want analyzed. Name these directories
# $versionNumber$ and then the interVersionKey's value. An example structure is shown below.

# default value: -src\\ (make sure to include the '\\' at the end.
interVersionKey = -src\\

# example structure:
# ~selenium
#    |- 0-src
#    |- 1-src
#    |- 2-src

# Move all the source files under their respective version directories that were built in the previous step.
# Preserve the package structure of the project. Generally, this will mean move everything under the project's 'src' directory.
# As a part of this step, make sure that the following value indicates the highest level package name within the project's source files
# An example structure is shown below.

#default value: "org\\" (make sure to include the '\\' at the end)
interProjectKey = com\\

# example structure after this step is complete:
# ~selenium
#    |- 0-src
#    |    |- org
#    |          |-openqa
#    |               |- selenium
#    |                    |- Foo.java
#    |                    |- Bar.java
#    |- 1-src
#    |     |- org
#    |          |-openqa
#    |               |- selenium
#    |                    |- Foo.java
#    |                    |-Bar.java
#    |- 2-src
#    |     |- org
#    |          |-openqa
#    |               |- selenium
#    |                    |- Foo.java
#    |                    |- Bar.java


# Pattern common names configurations. This resource should point to the directory that stores common names for each pattern.
# The contents of this directory will be text files, one per pattern type under analysis, where the name of the text file is the
# pattern type and the text within holds key value pairs of String, the key being the pattern role and the value being Strings
# that match to that role. I expect these to not change much, but one has the ability to add new role -> value mappings.
patternCommonNames = configs\\patternNames\\


#### OUTPUT CONFIGS
# These fields indicate configs specific to the output.

# refers to the count of consecutive pattern instances across versions that will be considered in the analysis.
# If a pattern instance has less than this value, it will not be included in the analysis.
# default value: 10
consecutivePatterns = 2

# output file name. If no path is specified it will output to the same directory as the jar.
outputFileName = hobbitsOutput.csv

# print individual pattern violations. Setting this to true will print each mapping from pattern class to role,
# including roles that have no mappings.
printIndividualRoles = true

# Make sure you have the src2XML tool installed and its binaries placed on the system classpath. Found here: https://www.srcml.org/#download.
#
# Run the jar! (java -jar pattern-analysis-1.0-SNAPSHOT-jar-with-dependencies.jar)
