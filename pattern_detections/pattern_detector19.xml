<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="com.google.common.base.Optional" />
			<role name="FactoryMethod()" element="com.google.common.base.Optional::transform():com.google.common.base.Optional" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.cache.LocalCache$EntryFactory" />
			<role name="FactoryMethod()" element="com.google.common.cache.LocalCache$EntryFactory::newEntry(, K, int, com.google.common.cache.LocalCache$ReferenceEntry):com.google.common.cache.LocalCache$ReferenceEntry" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.cache.LocalCache$Strength" />
			<role name="FactoryMethod()" element="com.google.common.cache.LocalCache$Strength::referenceValue(, com.google.common.cache.LocalCache$ReferenceEntry, V, int):com.google.common.cache.LocalCache$ValueReference" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.cache.LocalCache$ValueReference" />
			<role name="FactoryMethod()" element="com.google.common.cache.LocalCache$ValueReference::copyFor(java.lang.ref.ReferenceQueue, V, com.google.common.cache.LocalCache$ReferenceEntry):com.google.common.cache.LocalCache$ValueReference" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.BiMap" />
			<role name="FactoryMethod()" element="com.google.common.collect.BiMap::inverse():com.google.common.collect.BiMap" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.ContiguousSet" />
			<role name="FactoryMethod()" element="com.google.common.collect.ContiguousSet::subSetImpl(C, boolean, C, boolean):com.google.common.collect.ContiguousSet" />
			<role name="FactoryMethod()" element="com.google.common.collect.ContiguousSet::intersection(com.google.common.collect.ContiguousSet):com.google.common.collect.ContiguousSet" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.Cut" />
			<role name="FactoryMethod()" element="com.google.common.collect.Cut::withLowerBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain):com.google.common.collect.Cut" />
			<role name="FactoryMethod()" element="com.google.common.collect.Cut::withUpperBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain):com.google.common.collect.Cut" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.GenericMapMaker" />
			<role name="FactoryMethod()" element="com.google.common.collect.GenericMapMaker::makeCustomMap():com.google.common.collect.MapMakerInternalMap" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.ImmutableBiMap" />
			<role name="FactoryMethod()" element="com.google.common.collect.ImmutableBiMap::inverse():com.google.common.collect.ImmutableBiMap" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.ImmutableCollection" />
			<role name="FactoryMethod()" element="com.google.common.collect.ImmutableCollection::iterator():com.google.common.collect.UnmodifiableIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap" />
			<role name="FactoryMethod()" element="com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap::entryIterator():com.google.common.collect.UnmodifiableIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.ImmutableMap" />
			<role name="FactoryMethod()" element="com.google.common.collect.ImmutableMap::createEntrySet():com.google.common.collect.ImmutableSet" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.ImmutableTable" />
			<role name="FactoryMethod()" element="com.google.common.collect.ImmutableTable::createCellSet():com.google.common.collect.ImmutableSet" />
			<role name="FactoryMethod()" element="com.google.common.collect.ImmutableTable::createValues():com.google.common.collect.ImmutableCollection" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="FactoryMethod()" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::newEntry(, K, int, com.google.common.collect.MapMakerInternalMap$ReferenceEntry):com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.MapMakerInternalMap$Strength" />
			<role name="FactoryMethod()" element="com.google.common.collect.MapMakerInternalMap$Strength::referenceValue(, com.google.common.collect.MapMakerInternalMap$ReferenceEntry, V):com.google.common.collect.MapMakerInternalMap$ValueReference" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="FactoryMethod()" element="com.google.common.collect.MapMakerInternalMap$ValueReference::copyFor(java.lang.ref.ReferenceQueue, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry):com.google.common.collect.MapMakerInternalMap$ValueReference" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.RangeMap" />
			<role name="FactoryMethod()" element="com.google.common.collect.RangeMap::subRangeMap(com.google.common.collect.Range):com.google.common.collect.RangeMap" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.collect.SortedMultiset" />
			<role name="FactoryMethod()" element="com.google.common.collect.SortedMultiset::descendingMultiset():com.google.common.collect.SortedMultiset" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.hash.HashFunction" />
			<role name="FactoryMethod()" element="com.google.common.hash.HashFunction::newHasher():com.google.common.hash.Hasher" />
			<role name="FactoryMethod()" element="com.google.common.hash.HashFunction::newHasher(int):com.google.common.hash.Hasher" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.io.BaseEncoding" />
			<role name="FactoryMethod()" element="com.google.common.io.BaseEncoding::withSeparator(java.lang.String, int):com.google.common.io.BaseEncoding" />
		</instance>
		<instance>
			<role name="Creator" element="com.google.common.util.concurrent.ListeningScheduledExecutorService" />
			<role name="FactoryMethod()" element="com.google.common.util.concurrent.ListeningScheduledExecutorService::schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit):com.google.common.util.concurrent.ListenableScheduledFuture" />
			<role name="FactoryMethod()" element="com.google.common.util.concurrent.ListeningScheduledExecutorService::schedule(, long, java.util.concurrent.TimeUnit):com.google.common.util.concurrent.ListenableScheduledFuture" />
			<role name="FactoryMethod()" element="com.google.common.util.concurrent.ListeningScheduledExecutorService::scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):com.google.common.util.concurrent.ListenableScheduledFuture" />
			<role name="FactoryMethod()" element="com.google.common.util.concurrent.ListeningScheduledExecutorService::scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):com.google.common.util.concurrent.ListenableScheduledFuture" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="com.google.common.base.Absent" />
			<role name="uniqueInstance" element="com.google.common.base.Absent::INSTANCE:com.google.common.base.Absent" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CaseFormat" />
			<role name="uniqueInstance" element="com.google.common.base.CaseFormat::LOWER_HYPHEN:com.google.common.base.CaseFormat" />
			<role name="uniqueInstance" element="com.google.common.base.CaseFormat::LOWER_UNDERSCORE:com.google.common.base.CaseFormat" />
			<role name="uniqueInstance" element="com.google.common.base.CaseFormat::LOWER_CAMEL:com.google.common.base.CaseFormat" />
			<role name="uniqueInstance" element="com.google.common.base.CaseFormat::UPPER_CAMEL:com.google.common.base.CaseFormat" />
			<role name="uniqueInstance" element="com.google.common.base.CaseFormat::UPPER_UNDERSCORE:com.google.common.base.CaseFormat" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$Any" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$Any::INSTANCE:com.google.common.base.CharMatcher$Any" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$Ascii" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$Ascii::INSTANCE:com.google.common.base.CharMatcher$Ascii" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$Digit" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$Digit::INSTANCE:com.google.common.base.CharMatcher$Digit" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$Invisible" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$Invisible::INSTANCE:com.google.common.base.CharMatcher$Invisible" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$JavaDigit" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$JavaDigit::INSTANCE:com.google.common.base.CharMatcher$JavaDigit" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$JavaIsoControl" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$JavaIsoControl::INSTANCE:com.google.common.base.CharMatcher$JavaIsoControl" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$JavaLetter" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$JavaLetter::INSTANCE:com.google.common.base.CharMatcher$JavaLetter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$JavaLetterOrDigit" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$JavaLetterOrDigit::INSTANCE:com.google.common.base.CharMatcher$JavaLetterOrDigit" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$JavaLowerCase" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$JavaLowerCase::INSTANCE:com.google.common.base.CharMatcher$JavaLowerCase" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$JavaUpperCase" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$JavaUpperCase::INSTANCE:com.google.common.base.CharMatcher$JavaUpperCase" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$None" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$None::INSTANCE:com.google.common.base.CharMatcher$None" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$SingleWidth" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$SingleWidth::INSTANCE:com.google.common.base.CharMatcher$SingleWidth" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher$Whitespace" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher$Whitespace::INSTANCE:com.google.common.base.CharMatcher$Whitespace" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::WHITESPACE:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::BREAKING_WHITESPACE:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::ASCII:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::DIGIT:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::JAVA_DIGIT:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::JAVA_LETTER:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::JAVA_LETTER_OR_DIGIT:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::JAVA_UPPER_CASE:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::JAVA_LOWER_CASE:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::JAVA_ISO_CONTROL:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::INVISIBLE:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::SINGLE_WIDTH:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::ANY:com.google.common.base.CharMatcher" />
			<role name="uniqueInstance" element="com.google.common.base.CharMatcher::NONE:com.google.common.base.CharMatcher" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.Converter$IdentityConverter" />
			<role name="uniqueInstance" element="com.google.common.base.Converter$IdentityConverter::INSTANCE:com.google.common.base.Converter$IdentityConverter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.Equivalence$Equals" />
			<role name="uniqueInstance" element="com.google.common.base.Equivalence$Equals::INSTANCE:com.google.common.base.Equivalence$Equals" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.Equivalence$Identity" />
			<role name="uniqueInstance" element="com.google.common.base.Equivalence$Identity::INSTANCE:com.google.common.base.Equivalence$Identity" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.Predicates$ObjectPredicate" />
			<role name="uniqueInstance" element="com.google.common.base.Predicates$ObjectPredicate::ALWAYS_TRUE:com.google.common.base.Predicates$ObjectPredicate" />
			<role name="uniqueInstance" element="com.google.common.base.Predicates$ObjectPredicate::ALWAYS_FALSE:com.google.common.base.Predicates$ObjectPredicate" />
			<role name="uniqueInstance" element="com.google.common.base.Predicates$ObjectPredicate::IS_NULL:com.google.common.base.Predicates$ObjectPredicate" />
			<role name="uniqueInstance" element="com.google.common.base.Predicates$ObjectPredicate::NOT_NULL:com.google.common.base.Predicates$ObjectPredicate" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.base.Ticker" />
			<role name="uniqueInstance" element="com.google.common.base.Ticker::SYSTEM_TICKER:com.google.common.base.Ticker" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::STRONG:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::STRONG_ACCESS:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::STRONG_WRITE:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::STRONG_ACCESS_WRITE:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::WEAK:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::WEAK_ACCESS:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::WEAK_WRITE:com.google.common.cache.LocalCache$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$EntryFactory::WEAK_ACCESS_WRITE:com.google.common.cache.LocalCache$EntryFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.cache.LocalCache$Strength" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$Strength::STRONG:com.google.common.cache.LocalCache$Strength" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$Strength::SOFT:com.google.common.cache.LocalCache$Strength" />
			<role name="uniqueInstance" element="com.google.common.cache.LocalCache$Strength::WEAK:com.google.common.cache.LocalCache$Strength" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.cache.RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.cache.RemovalCause::EXPLICIT:com.google.common.cache.RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.cache.RemovalCause::REPLACED:com.google.common.cache.RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.cache.RemovalCause::COLLECTED:com.google.common.cache.RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.cache.RemovalCause::EXPIRED:com.google.common.cache.RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.cache.RemovalCause::SIZE:com.google.common.cache.RemovalCause" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.AllEqualOrdering" />
			<role name="uniqueInstance" element="com.google.common.collect.AllEqualOrdering::INSTANCE:com.google.common.collect.AllEqualOrdering" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.BoundType" />
			<role name="uniqueInstance" element="com.google.common.collect.BoundType::OPEN:com.google.common.collect.BoundType" />
			<role name="uniqueInstance" element="com.google.common.collect.BoundType::CLOSED:com.google.common.collect.BoundType" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ComparisonChain" />
			<role name="uniqueInstance" element="com.google.common.collect.ComparisonChain::ACTIVE:com.google.common.collect.ComparisonChain" />
			<role name="uniqueInstance" element="com.google.common.collect.ComparisonChain::LESS:com.google.common.collect.ComparisonChain" />
			<role name="uniqueInstance" element="com.google.common.collect.ComparisonChain::GREATER:com.google.common.collect.ComparisonChain" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.Cut$AboveAll" />
			<role name="uniqueInstance" element="com.google.common.collect.Cut$AboveAll::INSTANCE:com.google.common.collect.Cut$AboveAll" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.Cut$BelowAll" />
			<role name="uniqueInstance" element="com.google.common.collect.Cut$BelowAll::INSTANCE:com.google.common.collect.Cut$BelowAll" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.DiscreteDomain$BigIntegerDomain" />
			<role name="uniqueInstance" element="com.google.common.collect.DiscreteDomain$BigIntegerDomain::INSTANCE:com.google.common.collect.DiscreteDomain$BigIntegerDomain" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.DiscreteDomain$IntegerDomain" />
			<role name="uniqueInstance" element="com.google.common.collect.DiscreteDomain$IntegerDomain::INSTANCE:com.google.common.collect.DiscreteDomain$IntegerDomain" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.DiscreteDomain$LongDomain" />
			<role name="uniqueInstance" element="com.google.common.collect.DiscreteDomain$LongDomain::INSTANCE:com.google.common.collect.DiscreteDomain$LongDomain" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.EmptyImmutableListMultimap" />
			<role name="uniqueInstance" element="com.google.common.collect.EmptyImmutableListMultimap::INSTANCE:com.google.common.collect.EmptyImmutableListMultimap" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.EmptyImmutableSetMultimap" />
			<role name="uniqueInstance" element="com.google.common.collect.EmptyImmutableSetMultimap::INSTANCE:com.google.common.collect.EmptyImmutableSetMultimap" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ImmutableClassToInstanceMap" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableClassToInstanceMap::EMPTY:com.google.common.collect.ImmutableClassToInstanceMap" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ImmutableRangeMap" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableRangeMap::EMPTY:com.google.common.collect.ImmutableRangeMap" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ImmutableRangeSet" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableRangeSet::EMPTY:com.google.common.collect.ImmutableRangeSet" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableRangeSet::ALL:com.google.common.collect.ImmutableRangeSet" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ImmutableSortedMap" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableSortedMap::NATURAL_EMPTY_MAP:com.google.common.collect.ImmutableSortedMap" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ImmutableSortedMultiset" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableSortedMultiset::NATURAL_EMPTY_MULTISET:com.google.common.collect.ImmutableSortedMultiset" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ImmutableTable" />
			<role name="uniqueInstance" element="com.google.common.collect.ImmutableTable::EMPTY:com.google.common.collect.ImmutableTable" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.MapMaker$RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMaker$RemovalCause::EXPLICIT:com.google.common.collect.MapMaker$RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMaker$RemovalCause::REPLACED:com.google.common.collect.MapMaker$RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMaker$RemovalCause::COLLECTED:com.google.common.collect.MapMaker$RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMaker$RemovalCause::EXPIRED:com.google.common.collect.MapMaker$RemovalCause" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMaker$RemovalCause::SIZE:com.google.common.collect.MapMaker$RemovalCause" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::STRONG:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::STRONG_EXPIRABLE:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::STRONG_EVICTABLE:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::STRONG_EXPIRABLE_EVICTABLE:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::WEAK:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::WEAK_EXPIRABLE:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::WEAK_EVICTABLE:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$EntryFactory::WEAK_EXPIRABLE_EVICTABLE:com.google.common.collect.MapMakerInternalMap$EntryFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.MapMakerInternalMap$Strength" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$Strength::STRONG:com.google.common.collect.MapMakerInternalMap$Strength" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$Strength::SOFT:com.google.common.collect.MapMakerInternalMap$Strength" />
			<role name="uniqueInstance" element="com.google.common.collect.MapMakerInternalMap$Strength::WEAK:com.google.common.collect.MapMakerInternalMap$Strength" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.Maps$EntryFunction" />
			<role name="uniqueInstance" element="com.google.common.collect.Maps$EntryFunction::KEY:com.google.common.collect.Maps$EntryFunction" />
			<role name="uniqueInstance" element="com.google.common.collect.Maps$EntryFunction::VALUE:com.google.common.collect.Maps$EntryFunction" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.NaturalOrdering" />
			<role name="uniqueInstance" element="com.google.common.collect.NaturalOrdering::INSTANCE:com.google.common.collect.NaturalOrdering" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.Range" />
			<role name="uniqueInstance" element="com.google.common.collect.Range::ALL:com.google.common.collect.Range" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.RegularImmutableBiMap" />
			<role name="uniqueInstance" element="com.google.common.collect.RegularImmutableBiMap::EMPTY:com.google.common.collect.RegularImmutableBiMap" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.RegularImmutableMultiset" />
			<role name="uniqueInstance" element="com.google.common.collect.RegularImmutableMultiset::EMPTY:com.google.common.collect.RegularImmutableMultiset" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.RegularImmutableSet" />
			<role name="uniqueInstance" element="com.google.common.collect.RegularImmutableSet::EMPTY:com.google.common.collect.RegularImmutableSet" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.ReverseNaturalOrdering" />
			<role name="uniqueInstance" element="com.google.common.collect.ReverseNaturalOrdering::INSTANCE:com.google.common.collect.ReverseNaturalOrdering" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.SortedLists$KeyAbsentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyAbsentBehavior::NEXT_LOWER:com.google.common.collect.SortedLists$KeyAbsentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyAbsentBehavior::NEXT_HIGHER:com.google.common.collect.SortedLists$KeyAbsentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyAbsentBehavior::INVERTED_INSERTION_INDEX:com.google.common.collect.SortedLists$KeyAbsentBehavior" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.SortedLists$KeyPresentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyPresentBehavior::ANY_PRESENT:com.google.common.collect.SortedLists$KeyPresentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyPresentBehavior::LAST_PRESENT:com.google.common.collect.SortedLists$KeyPresentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyPresentBehavior::FIRST_PRESENT:com.google.common.collect.SortedLists$KeyPresentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyPresentBehavior::FIRST_AFTER:com.google.common.collect.SortedLists$KeyPresentBehavior" />
			<role name="uniqueInstance" element="com.google.common.collect.SortedLists$KeyPresentBehavior::LAST_BEFORE:com.google.common.collect.SortedLists$KeyPresentBehavior" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.TreeMultiset$Aggregate" />
			<role name="uniqueInstance" element="com.google.common.collect.TreeMultiset$Aggregate::SIZE:com.google.common.collect.TreeMultiset$Aggregate" />
			<role name="uniqueInstance" element="com.google.common.collect.TreeMultiset$Aggregate::DISTINCT:com.google.common.collect.TreeMultiset$Aggregate" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.collect.UsingToStringOrdering" />
			<role name="uniqueInstance" element="com.google.common.collect.UsingToStringOrdering::INSTANCE:com.google.common.collect.UsingToStringOrdering" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.eventbus.Dispatcher$ImmediateDispatcher" />
			<role name="uniqueInstance" element="com.google.common.eventbus.Dispatcher$ImmediateDispatcher::INSTANCE:com.google.common.eventbus.Dispatcher$ImmediateDispatcher" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.eventbus.EventBus$LoggingHandler" />
			<role name="uniqueInstance" element="com.google.common.eventbus.EventBus$LoggingHandler::INSTANCE:com.google.common.eventbus.EventBus$LoggingHandler" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.hash.BloomFilterStrategies" />
			<role name="uniqueInstance" element="com.google.common.hash.BloomFilterStrategies::MURMUR128_MITZ_32:com.google.common.hash.BloomFilterStrategies" />
			<role name="uniqueInstance" element="com.google.common.hash.BloomFilterStrategies::MURMUR128_MITZ_64:com.google.common.hash.BloomFilterStrategies" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.hash.Hashing$ChecksumType" />
			<role name="uniqueInstance" element="com.google.common.hash.Hashing$ChecksumType::CRC_32:com.google.common.hash.Hashing$ChecksumType" />
			<role name="uniqueInstance" element="com.google.common.hash.Hashing$ChecksumType::ADLER_32:com.google.common.hash.Hashing$ChecksumType" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.BaseEncoding" />
			<role name="uniqueInstance" element="com.google.common.io.BaseEncoding::BASE64:com.google.common.io.BaseEncoding" />
			<role name="uniqueInstance" element="com.google.common.io.BaseEncoding::BASE64_URL:com.google.common.io.BaseEncoding" />
			<role name="uniqueInstance" element="com.google.common.io.BaseEncoding::BASE32:com.google.common.io.BaseEncoding" />
			<role name="uniqueInstance" element="com.google.common.io.BaseEncoding::BASE32_HEX:com.google.common.io.BaseEncoding" />
			<role name="uniqueInstance" element="com.google.common.io.BaseEncoding::BASE16:com.google.common.io.BaseEncoding" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.ByteSource$EmptyByteSource" />
			<role name="uniqueInstance" element="com.google.common.io.ByteSource$EmptyByteSource::INSTANCE:com.google.common.io.ByteSource$EmptyByteSource" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.CharSource$EmptyCharSource" />
			<role name="uniqueInstance" element="com.google.common.io.CharSource$EmptyCharSource::INSTANCE:com.google.common.io.CharSource$EmptyCharSource" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.CharStreams$NullWriter" />
			<role name="uniqueInstance" element="com.google.common.io.CharStreams$NullWriter::INSTANCE:com.google.common.io.CharStreams$NullWriter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.Closer$LoggingSuppressor" />
			<role name="uniqueInstance" element="com.google.common.io.Closer$LoggingSuppressor::INSTANCE:com.google.common.io.Closer$LoggingSuppressor" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.Closer$SuppressingSuppressor" />
			<role name="uniqueInstance" element="com.google.common.io.Closer$SuppressingSuppressor::INSTANCE:com.google.common.io.Closer$SuppressingSuppressor" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.io.Files$FilePredicate" />
			<role name="uniqueInstance" element="com.google.common.io.Files$FilePredicate::IS_DIRECTORY:com.google.common.io.Files$FilePredicate" />
			<role name="uniqueInstance" element="com.google.common.io.Files$FilePredicate::IS_FILE:com.google.common.io.Files$FilePredicate" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.math.LongMath$MillerRabinTester" />
			<role name="uniqueInstance" element="com.google.common.math.LongMath$MillerRabinTester::SMALL:com.google.common.math.LongMath$MillerRabinTester" />
			<role name="uniqueInstance" element="com.google.common.math.LongMath$MillerRabinTester::LARGE:com.google.common.math.LongMath$MillerRabinTester" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ANY_TYPE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ANY_TEXT_TYPE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ANY_IMAGE_TYPE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ANY_AUDIO_TYPE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ANY_VIDEO_TYPE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ANY_APPLICATION_TYPE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::CACHE_MANIFEST_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::CSS_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::CSV_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::HTML_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::I_CALENDAR_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::PLAIN_TEXT_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::TEXT_JAVASCRIPT_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::TSV_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::VCARD_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::WML_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::XML_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::BMP:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::CRW:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::GIF:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ICO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::JPEG:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::PNG:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::PSD:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::SVG_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::TIFF:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::WEBP:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MP4_AUDIO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MPEG_AUDIO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OGG_AUDIO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::WEBM_AUDIO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MP4_VIDEO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MPEG_VIDEO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OGG_VIDEO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::QUICKTIME:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::WEBM_VIDEO:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::WMV:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::APPLICATION_XML_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ATOM_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::BZIP2:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::DART_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::APPLE_PASSBOOK:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::EOT:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::EPUB:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::FORM_DATA:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::KEY_ARCHIVE:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::APPLICATION_BINARY:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::GZIP:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::JAVASCRIPT_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::JSON_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MANIFEST_JSON_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::KML:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::KMZ:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MBOX:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::APPLE_MOBILE_CONFIG:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MICROSOFT_EXCEL:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MICROSOFT_POWERPOINT:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::MICROSOFT_WORD:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OCTET_STREAM:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OGG_CONTAINER:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OOXML_DOCUMENT:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OOXML_PRESENTATION:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OOXML_SHEET:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OPENDOCUMENT_GRAPHICS:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OPENDOCUMENT_PRESENTATION:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OPENDOCUMENT_SPREADSHEET:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::OPENDOCUMENT_TEXT:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::PDF:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::POSTSCRIPT:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::PROTOBUF:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::RDF_XML_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::RTF_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::SFNT:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::SHOCKWAVE_FLASH:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::SKETCHUP:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::TAR:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::WOFF:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::XHTML_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::XRD_UTF_8:com.google.common.net.MediaType" />
			<role name="uniqueInstance" element="com.google.common.net.MediaType::ZIP:com.google.common.net.MediaType" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.Doubles$DoubleConverter" />
			<role name="uniqueInstance" element="com.google.common.primitives.Doubles$DoubleConverter::INSTANCE:com.google.common.primitives.Doubles$DoubleConverter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.Floats$FloatConverter" />
			<role name="uniqueInstance" element="com.google.common.primitives.Floats$FloatConverter::INSTANCE:com.google.common.primitives.Floats$FloatConverter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.Ints$IntConverter" />
			<role name="uniqueInstance" element="com.google.common.primitives.Ints$IntConverter::INSTANCE:com.google.common.primitives.Ints$IntConverter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.Longs$LongConverter" />
			<role name="uniqueInstance" element="com.google.common.primitives.Longs$LongConverter::INSTANCE:com.google.common.primitives.Longs$LongConverter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.Shorts$ShortConverter" />
			<role name="uniqueInstance" element="com.google.common.primitives.Shorts$ShortConverter::INSTANCE:com.google.common.primitives.Shorts$ShortConverter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.UnsignedInteger" />
			<role name="uniqueInstance" element="com.google.common.primitives.UnsignedInteger::ZERO:com.google.common.primitives.UnsignedInteger" />
			<role name="uniqueInstance" element="com.google.common.primitives.UnsignedInteger::ONE:com.google.common.primitives.UnsignedInteger" />
			<role name="uniqueInstance" element="com.google.common.primitives.UnsignedInteger::MAX_VALUE:com.google.common.primitives.UnsignedInteger" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.primitives.UnsignedLong" />
			<role name="uniqueInstance" element="com.google.common.primitives.UnsignedLong::ZERO:com.google.common.primitives.UnsignedLong" />
			<role name="uniqueInstance" element="com.google.common.primitives.UnsignedLong::ONE:com.google.common.primitives.UnsignedLong" />
			<role name="uniqueInstance" element="com.google.common.primitives.UnsignedLong::MAX_VALUE:com.google.common.primitives.UnsignedLong" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.reflect.Types$ClassOwnership" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$ClassOwnership::OWNED_BY_ENCLOSING_CLASS:com.google.common.reflect.Types$ClassOwnership" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$ClassOwnership::LOCAL_CLASS_HAS_NO_OWNER:com.google.common.reflect.Types$ClassOwnership" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$ClassOwnership::JVM_BEHAVIOR:com.google.common.reflect.Types$ClassOwnership" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.reflect.Types$JavaVersion" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$JavaVersion::JAVA6:com.google.common.reflect.Types$JavaVersion" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$JavaVersion::JAVA7:com.google.common.reflect.Types$JavaVersion" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$JavaVersion::JAVA8:com.google.common.reflect.Types$JavaVersion" />
			<role name="uniqueInstance" element="com.google.common.reflect.Types$JavaVersion::CURRENT:com.google.common.reflect.Types$JavaVersion" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.reflect.TypeToken$TypeCollector" />
			<role name="uniqueInstance" element="com.google.common.reflect.TypeToken$TypeCollector::FOR_GENERIC_TYPE:com.google.common.reflect.TypeToken$TypeCollector" />
			<role name="uniqueInstance" element="com.google.common.reflect.TypeToken$TypeCollector::FOR_RAW_TYPE:com.google.common.reflect.TypeToken$TypeCollector" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.reflect.TypeToken$TypeFilter" />
			<role name="uniqueInstance" element="com.google.common.reflect.TypeToken$TypeFilter::IGNORE_TYPE_VARIABLE_OR_WILDCARD:com.google.common.reflect.TypeToken$TypeFilter" />
			<role name="uniqueInstance" element="com.google.common.reflect.TypeToken$TypeFilter::INTERFACE_ONLY:com.google.common.reflect.TypeToken$TypeFilter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.util.concurrent.AbstractFuture$Failure" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.AbstractFuture$Failure::FALLBACK_INSTANCE:com.google.common.util.concurrent.AbstractFuture$Failure" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.util.concurrent.AbstractFuture$Listener" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.AbstractFuture$Listener::TOMBSTONE:com.google.common.util.concurrent.AbstractFuture$Listener" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.util.concurrent.AbstractFuture$Waiter" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.AbstractFuture$Waiter::TOMBSTONE:com.google.common.util.concurrent.AbstractFuture$Waiter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.util.concurrent.CycleDetectingLockFactory$Policies" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.CycleDetectingLockFactory$Policies::THROW:com.google.common.util.concurrent.CycleDetectingLockFactory$Policies" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.CycleDetectingLockFactory$Policies::WARN:com.google.common.util.concurrent.CycleDetectingLockFactory$Policies" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.CycleDetectingLockFactory$Policies::DISABLED:com.google.common.util.concurrent.CycleDetectingLockFactory$Policies" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture::NULL:com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture" />
		</instance>
		<instance>
			<role name="Singleton" element="com.google.common.util.concurrent.Service$State" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Service$State::NEW:com.google.common.util.concurrent.Service$State" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Service$State::STARTING:com.google.common.util.concurrent.Service$State" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Service$State::RUNNING:com.google.common.util.concurrent.Service$State" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Service$State::STOPPING:com.google.common.util.concurrent.Service$State" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Service$State::TERMINATED:com.google.common.util.concurrent.Service$State" />
			<role name="uniqueInstance" element="com.google.common.util.concurrent.Service$State::FAILED:com.google.common.util.concurrent.Service$State" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="com.google.common.util.concurrent.ExecutionList" />
			<role name="Adapter" element="com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter" />
			<role name="adaptee" element="com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter::executionList:com.google.common.util.concurrent.ExecutionList" />
			<role name="Request()" element="com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter::addListener(java.lang.Runnable, java.util.concurrent.Executor):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.hash.BloomFilterStrategies$BitArray" />
			<role name="Adapter" element="com.google.common.hash.BloomFilter" />
			<role name="adaptee" element="com.google.common.hash.BloomFilter::bits:com.google.common.hash.BloomFilterStrategies$BitArray" />
			<role name="Request()" element="com.google.common.hash.BloomFilter::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.util.concurrent.Monitor" />
			<role name="Adapter" element="com.google.common.util.concurrent.AbstractService" />
			<role name="adaptee" element="com.google.common.util.concurrent.AbstractService::monitor:com.google.common.util.concurrent.Monitor" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::awaitRunning():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::awaitRunning(long, java.util.concurrent.TimeUnit):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::awaitTerminated():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::awaitTerminated(long, java.util.concurrent.TimeUnit):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.util.concurrent.AbstractService$StateSnapshot" />
			<role name="Adapter" element="com.google.common.util.concurrent.AbstractService" />
			<role name="adaptee" element="com.google.common.util.concurrent.AbstractService::snapshot:com.google.common.util.concurrent.AbstractService$StateSnapshot" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::state():com.google.common.util.concurrent.Service$State" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractService::failureCause():java.lang.Throwable" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.util.concurrent.ExecutionList" />
			<role name="Adapter" element="com.google.common.util.concurrent.ListenableFutureTask" />
			<role name="adaptee" element="com.google.common.util.concurrent.ListenableFutureTask::executionList:com.google.common.util.concurrent.ExecutionList" />
			<role name="Request()" element="com.google.common.util.concurrent.ListenableFutureTask::addListener(java.lang.Runnable, java.util.concurrent.Executor):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableMap" />
			<role name="Adapter" element="com.google.common.collect.ImmutableMapKeySet" />
			<role name="adaptee" element="com.google.common.collect.ImmutableMapKeySet::map:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.ImmutableMapKeySet::get(int):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.cache.LocalCache" />
			<role name="Adapter" element="com.google.common.cache.LocalCache$LocalManualCache" />
			<role name="adaptee" element="com.google.common.cache.LocalCache$LocalManualCache::localCache:com.google.common.cache.LocalCache" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::getIfPresent(java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::get(K, java.util.concurrent.Callable):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::getAllPresent(java.lang.Iterable):com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::put(K, V):void" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::putAll(java.util.Map):void" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::invalidate(java.lang.Object):void" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::invalidateAll(java.lang.Iterable):void" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::invalidateAll():void" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::size():long" />
			<role name="Request()" element="com.google.common.cache.LocalCache$LocalManualCache::cleanUp():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableMultimap" />
			<role name="Adapter" element="com.google.common.collect.ImmutableMultimap$EntryCollection" />
			<role name="adaptee" element="com.google.common.collect.ImmutableMultimap$EntryCollection::multimap:com.google.common.collect.ImmutableMultimap" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultimap$EntryCollection::isPartialView():boolean" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultimap$EntryCollection::contains(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableMultimap" />
			<role name="Adapter" element="com.google.common.collect.ImmutableMultimap$Values" />
			<role name="adaptee" element="com.google.common.collect.ImmutableMultimap$Values::multimap:com.google.common.collect.ImmutableMultimap" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultimap$Values::contains(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.Range" />
			<role name="Adapter" element="com.google.common.collect.RegularContiguousSet" />
			<role name="adaptee" element="com.google.common.collect.RegularContiguousSet::range:com.google.common.collect.Range" />
			<role name="Request()" element="com.google.common.collect.RegularContiguousSet::range(com.google.common.collect.BoundType, com.google.common.collect.BoundType):com.google.common.collect.Range" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableMap" />
			<role name="Adapter" element="com.google.common.collect.SparseImmutableTable" />
			<role name="adaptee" element="com.google.common.collect.SparseImmutableTable::rowMap:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.SparseImmutableTable::getCell(int):com.google.common.collect.Table$Cell" />
			<role name="Request()" element="com.google.common.collect.SparseImmutableTable::getValue(int):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding" />
			<role name="Adaptee" element="com.google.common.base.CharMatcher" />
			<role name="adaptee" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::separatorChars:com.google.common.base.CharMatcher" />
			<role name="Request()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::decodeTo(byte[], java.lang.CharSequence):int" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.io.BaseEncoding$StandardBaseEncoding" />
			<role name="Adaptee" element="com.google.common.io.BaseEncoding$Alphabet" />
			<role name="adaptee" element="com.google.common.io.BaseEncoding$StandardBaseEncoding::alphabet:com.google.common.io.BaseEncoding$Alphabet" />
			<role name="Request()" element="com.google.common.io.BaseEncoding$StandardBaseEncoding::decodeTo(byte[], java.lang.CharSequence):int" />
			<role name="Request()" element="com.google.common.io.BaseEncoding$StandardBaseEncoding::upperCase():com.google.common.io.BaseEncoding" />
			<role name="Request()" element="com.google.common.io.BaseEncoding$StandardBaseEncoding::lowerCase():com.google.common.io.BaseEncoding" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableList" />
			<role name="Adapter" element="com.google.common.collect.CompoundOrdering" />
			<role name="adaptee" element="com.google.common.collect.CompoundOrdering::comparators:com.google.common.collect.ImmutableList" />
			<role name="Request()" element="com.google.common.collect.CompoundOrdering::compare(T, T):int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableList" />
			<role name="Adapter" element="com.google.common.collect.ImmutableRangeSet" />
			<role name="adaptee" element="com.google.common.collect.ImmutableRangeSet::ranges:com.google.common.collect.ImmutableList" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeSet::encloses(com.google.common.collect.Range):boolean" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeSet::rangeContaining(C):com.google.common.collect.Range" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.Range" />
			<role name="Adapter" element="com.google.common.collect.TreeRangeMap$SubRangeMap" />
			<role name="adaptee" element="com.google.common.collect.TreeRangeMap$SubRangeMap::subRange:com.google.common.collect.Range" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::get(K):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::getEntry(K):java.util.Map$Entry" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::span():com.google.common.collect.Range" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::put(com.google.common.collect.Range, V):void" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::putAll(com.google.common.collect.RangeMap):void" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::remove(com.google.common.collect.Range):void" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::subRangeMap(com.google.common.collect.Range):com.google.common.collect.RangeMap" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.Cut" />
			<role name="Adapter" element="com.google.common.collect.Range" />
			<role name="adaptee" element="com.google.common.collect.Range::lowerBound:com.google.common.collect.Cut" />
			<role name="adaptee" element="com.google.common.collect.Range::upperBound:com.google.common.collect.Cut" />
			<role name="Request()" element="com.google.common.collect.Range::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.Multimap" />
			<role name="Adapter" element="com.google.common.collect.Multimaps$Keys" />
			<role name="adaptee" element="com.google.common.collect.Multimaps$Keys::multimap:com.google.common.collect.Multimap" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::distinctElements():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.util.concurrent.AbstractFuture$AtomicHelper" />
			<role name="Adapter" element="com.google.common.util.concurrent.AbstractFuture" />
			<role name="adaptee" element="com.google.common.util.concurrent.AbstractFuture::ATOMIC_HELPER:com.google.common.util.concurrent.AbstractFuture$AtomicHelper" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractFuture::addListener(java.lang.Runnable, java.util.concurrent.Executor):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableList" />
			<role name="Adapter" element="com.google.common.collect.ImmutableRangeMap" />
			<role name="adaptee" element="com.google.common.collect.ImmutableRangeMap::ranges:com.google.common.collect.ImmutableList" />
			<role name="adaptee" element="com.google.common.collect.ImmutableRangeMap::values:com.google.common.collect.ImmutableList" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeMap::get(K):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeMap::getEntry(K):java.util.Map$Entry" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeMap::span():com.google.common.collect.Range" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableMap" />
			<role name="Adapter" element="com.google.common.collect.ArrayTable$ArrayMap" />
			<role name="adaptee" element="com.google.common.collect.ArrayTable$ArrayMap::keyIndex:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.ArrayTable$ArrayMap::size():int" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.base.Predicates$CompositionPredicate" />
			<role name="Adaptee" element="com.google.common.base.Function" />
			<role name="adaptee" element="com.google.common.base.Predicates$CompositionPredicate::f:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.base.Predicates$CompositionPredicate::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.base.Functions$PredicateFunction" />
			<role name="Adaptee" element="com.google.common.base.Predicate" />
			<role name="adaptee" element="com.google.common.base.Functions$PredicateFunction::predicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.base.Functions$PredicateFunction::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.ImmutableMap" />
			<role name="Adapter" element="com.google.common.collect.ImmutableClassToInstanceMap" />
			<role name="adaptee" element="com.google.common.collect.ImmutableClassToInstanceMap::delegate:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.ImmutableClassToInstanceMap::getInstance():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.base.Suppliers$SupplierComposition" />
			<role name="Adaptee" element="com.google.common.base.Function" />
			<role name="adaptee" element="com.google.common.base.Suppliers$SupplierComposition::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.base.Suppliers$SupplierComposition::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Function" />
			<role name="Adapter" element="com.google.common.util.concurrent.Futures$MappingCheckedFuture" />
			<role name="adaptee" element="com.google.common.util.concurrent.Futures$MappingCheckedFuture::mapper:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.util.concurrent.Futures$MappingCheckedFuture::mapException(java.lang.Exception):java.lang.Exception" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Supplier" />
			<role name="Adapter" element="com.google.common.collect.Multimaps$CustomListMultimap" />
			<role name="adaptee" element="com.google.common.collect.Multimaps$CustomListMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomListMultimap::createCollection():java.util.List" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Supplier" />
			<role name="Adapter" element="com.google.common.collect.Multimaps$CustomMultimap" />
			<role name="adaptee" element="com.google.common.collect.Multimaps$CustomMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomMultimap::createCollection():java.util.Collection" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Supplier" />
			<role name="Adapter" element="com.google.common.collect.Multimaps$CustomSetMultimap" />
			<role name="adaptee" element="com.google.common.collect.Multimaps$CustomSetMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomSetMultimap::createCollection():java.util.Set" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Supplier" />
			<role name="Adapter" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap" />
			<role name="adaptee" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap::createCollection():java.util.SortedSet" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.cache.LongAddable" />
			<role name="Adapter" element="com.google.common.cache.AbstractCache$SimpleStatsCounter" />
			<role name="adaptee" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::hitCount:com.google.common.cache.LongAddable" />
			<role name="adaptee" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::missCount:com.google.common.cache.LongAddable" />
			<role name="adaptee" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::loadSuccessCount:com.google.common.cache.LongAddable" />
			<role name="adaptee" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::totalLoadTime:com.google.common.cache.LongAddable" />
			<role name="adaptee" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::loadExceptionCount:com.google.common.cache.LongAddable" />
			<role name="adaptee" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::evictionCount:com.google.common.cache.LongAddable" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordHits(int):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordMisses(int):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordLoadSuccess(long):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordLoadException(long):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordEviction():void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::snapshot():com.google.common.cache.CacheStats" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.collect.MapMakerInternalMap$SoftEntry" />
			<role name="Adaptee" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="adaptee" element="com.google.common.collect.MapMakerInternalMap$SoftEntry::valueReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$SoftEntry::setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.collect.MapMakerInternalMap$StrongEntry" />
			<role name="Adaptee" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="adaptee" element="com.google.common.collect.MapMakerInternalMap$StrongEntry::valueReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$StrongEntry::setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.google.common.collect.MapMakerInternalMap$WeakEntry" />
			<role name="Adaptee" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="adaptee" element="com.google.common.collect.MapMakerInternalMap$WeakEntry::valueReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$WeakEntry::setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Stopwatch" />
			<role name="Adapter" element="com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1" />
			<role name="adaptee" element="com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1::stopwatch:com.google.common.base.Stopwatch" />
			<role name="Request()" element="com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1::readMicros():long" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Equivalence" />
			<role name="Adapter" element="com.google.common.base.Equivalence$EquivalentToPredicate" />
			<role name="adaptee" element="com.google.common.base.Equivalence$EquivalentToPredicate::equivalence:com.google.common.base.Equivalence" />
			<role name="Request()" element="com.google.common.base.Equivalence$EquivalentToPredicate::apply(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.BiMap" />
			<role name="Adapter" element="com.google.common.collect.Maps$BiMapConverter" />
			<role name="adaptee" element="com.google.common.collect.Maps$BiMapConverter::bimap:com.google.common.collect.BiMap" />
			<role name="Request()" element="com.google.common.collect.Maps$BiMapConverter::doBackward(B):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.MapMakerInternalMap" />
			<role name="Adapter" element="com.google.common.collect.Interners$WeakInterner" />
			<role name="adaptee" element="com.google.common.collect.Interners$WeakInterner::map:com.google.common.collect.MapMakerInternalMap" />
			<role name="Request()" element="com.google.common.collect.Interners$WeakInterner::intern(E):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.collect.SetMultimap" />
			<role name="Adapter" element="com.google.common.reflect.ClassPath$DefaultScanner" />
			<role name="adaptee" element="com.google.common.reflect.ClassPath$DefaultScanner::resources:com.google.common.collect.SetMultimap" />
			<role name="Request()" element="com.google.common.reflect.ClassPath$DefaultScanner::scanJarFile(java.lang.ClassLoader, java.util.jar.JarFile):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Function" />
			<role name="Adapter" element="com.google.common.cache.CacheLoader$FunctionToCacheLoader" />
			<role name="adaptee" element="com.google.common.cache.CacheLoader$FunctionToCacheLoader::computingFunction:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.cache.CacheLoader$FunctionToCacheLoader::load(K):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.google.common.base.Function" />
			<role name="Adapter" element="com.google.common.collect.Maps$NavigableAsMapView" />
			<role name="adaptee" element="com.google.common.collect.Maps$NavigableAsMapView::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.Maps$NavigableAsMapView::get(java.lang.Object):java.lang.Object" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite" />
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="com.google.common.collect.Ordering" />
			<role name="Decorator" element="com.google.common.collect.NullsFirstOrdering" />
			<role name="component" element="com.google.common.collect.NullsFirstOrdering::ordering:com.google.common.collect.Ordering" />
			<role name="Operation()" element="com.google.common.collect.NullsFirstOrdering::compare(T, T):int" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Ordering" />
			<role name="Decorator" element="com.google.common.collect.NullsLastOrdering" />
			<role name="component" element="com.google.common.collect.NullsLastOrdering::ordering:com.google.common.collect.Ordering" />
			<role name="Operation()" element="com.google.common.collect.NullsLastOrdering::compare(T, T):int" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Ordering" />
			<role name="Decorator" element="com.google.common.collect.ReverseOrdering" />
			<role name="component" element="com.google.common.collect.ReverseOrdering::forwardOrder:com.google.common.collect.Ordering" />
			<role name="Operation()" element="com.google.common.collect.ReverseOrdering::compare(T, T):int" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.ImmutableSortedMultiset" />
			<role name="Decorator" element="com.google.common.collect.DescendingImmutableSortedMultiset" />
			<role name="component" element="com.google.common.collect.DescendingImmutableSortedMultiset::forward:com.google.common.collect.ImmutableSortedMultiset" />
			<role name="Operation()" element="com.google.common.collect.DescendingImmutableSortedMultiset::elementSet():com.google.common.collect.ImmutableSortedSet" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.ImmutableSortedSet" />
			<role name="Decorator" element="com.google.common.collect.DescendingImmutableSortedSet" />
			<role name="component" element="com.google.common.collect.DescendingImmutableSortedSet::forward:com.google.common.collect.ImmutableSortedSet" />
			<role name="Operation()" element="com.google.common.collect.DescendingImmutableSortedSet::indexOf(java.lang.Object):int" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.io.BaseEncoding" />
			<role name="Decorator" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding" />
			<role name="component" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::delegate:com.google.common.io.BaseEncoding" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::padding():com.google.common.base.CharMatcher" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::maxEncodedSize(int):int" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::encodingStream(java.io.Writer):java.io.OutputStream" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::encodeTo(java.lang.Appendable, byte[], int, int):void" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::maxDecodedSize(int):int" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::decodeTo(byte[], java.lang.CharSequence):int" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::decodingStream(java.io.Reader):java.io.InputStream" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::omitPadding():com.google.common.io.BaseEncoding" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::withPadChar(char):com.google.common.io.BaseEncoding" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::upperCase():com.google.common.io.BaseEncoding" />
			<role name="Operation()" element="com.google.common.io.BaseEncoding$SeparatedBaseEncoding::lowerCase():com.google.common.io.BaseEncoding" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.reflect.TypeToken$TypeCollector" />
			<role name="Decorator" element="com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector" />
			<role name="component" element="com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector::delegate:com.google.common.reflect.TypeToken$TypeCollector" />
			<role name="Operation()" element="com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector::getRawType(K):java.lang.Class" />
			<role name="Operation()" element="com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector::getInterfaces(K):java.lang.Iterable" />
			<role name="Operation()" element="com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector::getSuperclass(K):java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Function" />
			<role name="Decorator" element="com.google.common.base.Converter$FunctionBasedConverter" />
			<role name="component" element="com.google.common.base.Converter$FunctionBasedConverter::forwardFunction:com.google.common.base.Function" />
			<role name="component" element="com.google.common.base.Converter$FunctionBasedConverter::backwardFunction:com.google.common.base.Function" />
			<role name="Operation()" element="com.google.common.base.Converter$FunctionBasedConverter::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Function" />
			<role name="Decorator" element="com.google.common.base.Functions$FunctionComposition" />
			<role name="component" element="com.google.common.base.Functions$FunctionComposition::f:com.google.common.base.Function" />
			<role name="component" element="com.google.common.base.Functions$FunctionComposition::g:com.google.common.base.Function" />
			<role name="Operation()" element="com.google.common.base.Functions$FunctionComposition::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.CharMatcher" />
			<role name="Decorator" element="com.google.common.base.CharMatcher$And" />
			<role name="component" element="com.google.common.base.CharMatcher$And::first:com.google.common.base.CharMatcher" />
			<role name="component" element="com.google.common.base.CharMatcher$And::second:com.google.common.base.CharMatcher" />
			<role name="Operation()" element="com.google.common.base.CharMatcher$And::matches(char):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.CharMatcher" />
			<role name="Decorator" element="com.google.common.base.CharMatcher$Negated" />
			<role name="component" element="com.google.common.base.CharMatcher$Negated::original:com.google.common.base.CharMatcher" />
			<role name="Operation()" element="com.google.common.base.CharMatcher$Negated::matches(char):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.CharMatcher" />
			<role name="Decorator" element="com.google.common.base.CharMatcher$Or" />
			<role name="component" element="com.google.common.base.CharMatcher$Or::first:com.google.common.base.CharMatcher" />
			<role name="component" element="com.google.common.base.CharMatcher$Or::second:com.google.common.base.CharMatcher" />
			<role name="Operation()" element="com.google.common.base.CharMatcher$Or::matches(char):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Predicate" />
			<role name="Decorator" element="com.google.common.base.Predicates$CompositionPredicate" />
			<role name="component" element="com.google.common.base.Predicates$CompositionPredicate::p:com.google.common.base.Predicate" />
			<role name="Operation()" element="com.google.common.base.Predicates$CompositionPredicate::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Predicate" />
			<role name="Decorator" element="com.google.common.base.Predicates$NotPredicate" />
			<role name="component" element="com.google.common.base.Predicates$NotPredicate::predicate:com.google.common.base.Predicate" />
			<role name="Operation()" element="com.google.common.base.Predicates$NotPredicate::apply(T):boolean" />
			<role name="Operation()" element="com.google.common.base.Predicates$NotPredicate::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.cache.LoadingCache" />
			<role name="Decorator" element="com.google.common.cache.LocalCache$LoadingSerializationProxy" />
			<role name="component" element="com.google.common.cache.LocalCache$LoadingSerializationProxy::autoDelegate:com.google.common.cache.LoadingCache" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingSerializationProxy::get(K):java.lang.Object" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingSerializationProxy::getUnchecked(K):java.lang.Object" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingSerializationProxy::getAll(java.lang.Iterable):com.google.common.collect.ImmutableMap" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingSerializationProxy::apply(K):java.lang.Object" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingSerializationProxy::refresh(K):void" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multimap" />
			<role name="Decorator" element="com.google.common.collect.FilteredEntryMultimap" />
			<role name="component" element="com.google.common.collect.FilteredEntryMultimap::unfiltered:com.google.common.collect.Multimap" />
			<role name="Operation()" element="com.google.common.collect.FilteredEntryMultimap::get(K):java.util.Collection" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multimap" />
			<role name="Decorator" element="com.google.common.collect.FilteredKeyMultimap" />
			<role name="component" element="com.google.common.collect.FilteredKeyMultimap::unfiltered:com.google.common.collect.Multimap" />
			<role name="Operation()" element="com.google.common.collect.FilteredKeyMultimap::containsKey(java.lang.Object):boolean" />
			<role name="Operation()" element="com.google.common.collect.FilteredKeyMultimap::removeAll(java.lang.Object):java.util.Collection" />
			<role name="Operation()" element="com.google.common.collect.FilteredKeyMultimap::get(K):java.util.Collection" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multimap" />
			<role name="Decorator" element="com.google.common.collect.MapConstraints$ConstrainedMultimap" />
			<role name="component" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::delegate:com.google.common.collect.Multimap" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::asMap():java.util.Map" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::entries():java.util.Collection" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::get(K):java.util.Collection" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::put(K, V):boolean" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::putAll(K, java.lang.Iterable):boolean" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::replaceValues(K, java.lang.Iterable):java.util.Collection" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multimap" />
			<role name="Decorator" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap" />
			<role name="component" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::fromMultimap:com.google.common.collect.Multimap" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::clear():void" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::containsKey(java.lang.Object):boolean" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::isEmpty():boolean" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::keySet():java.util.Set" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::keys():com.google.common.collect.Multiset" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$TransformedEntriesMultimap::size():int" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multimap" />
			<role name="Decorator" element="com.google.common.collect.Multimaps$UnmodifiableMultimap" />
			<role name="component" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::delegate:com.google.common.collect.Multimap" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::asMap():java.util.Map" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::entries():java.util.Collection" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::get(K):java.util.Collection" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::keys():com.google.common.collect.Multiset" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::keySet():java.util.Set" />
			<role name="Operation()" element="com.google.common.collect.Multimaps$UnmodifiableMultimap::values():java.util.Collection" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Table" />
			<role name="Decorator" element="com.google.common.collect.Tables$TransformedTable" />
			<role name="component" element="com.google.common.collect.Tables$TransformedTable::fromTable:com.google.common.collect.Table" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::contains(java.lang.Object, java.lang.Object):boolean" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::get(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::size():int" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::clear():void" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::remove(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::rowKeySet():java.util.Set" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransformedTable::columnKeySet():java.util.Set" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Table" />
			<role name="Decorator" element="com.google.common.collect.Tables$TransposeTable" />
			<role name="component" element="com.google.common.collect.Tables$TransposeTable::original:com.google.common.collect.Table" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::clear():void" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::contains(java.lang.Object, java.lang.Object):boolean" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::containsValue(java.lang.Object):boolean" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::get(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::remove(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::size():int" />
			<role name="Operation()" element="com.google.common.collect.Tables$TransposeTable::values():java.util.Collection" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multiset" />
			<role name="Decorator" element="com.google.common.collect.Multisets$FilteredMultiset" />
			<role name="component" element="com.google.common.collect.Multisets$FilteredMultiset::unfiltered:com.google.common.collect.Multiset" />
			<role name="Operation()" element="com.google.common.collect.Multisets$FilteredMultiset::count(java.lang.Object):int" />
			<role name="Operation()" element="com.google.common.collect.Multisets$FilteredMultiset::add(E, int):int" />
			<role name="Operation()" element="com.google.common.collect.Multisets$FilteredMultiset::remove(java.lang.Object, int):int" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.Multiset" />
			<role name="Decorator" element="com.google.common.collect.Multisets$UnmodifiableMultiset" />
			<role name="component" element="com.google.common.collect.Multisets$UnmodifiableMultiset::delegate:com.google.common.collect.Multiset" />
			<role name="Operation()" element="com.google.common.collect.Multisets$UnmodifiableMultiset::entrySet():java.util.Set" />
			<role name="Operation()" element="com.google.common.collect.Multisets$UnmodifiableMultiset::iterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.BiMap" />
			<role name="Decorator" element="com.google.common.collect.MapConstraints$ConstrainedBiMap" />
			<role name="component" element="com.google.common.collect.MapConstraints$ConstrainedBiMap::inverse:com.google.common.collect.BiMap" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$ConstrainedBiMap::inverse():com.google.common.collect.BiMap" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.BiMap" />
			<role name="Decorator" element="com.google.common.collect.Maps$UnmodifiableBiMap" />
			<role name="component" element="com.google.common.collect.Maps$UnmodifiableBiMap::inverse:com.google.common.collect.BiMap" />
			<role name="component" element="com.google.common.collect.Maps$UnmodifiableBiMap::delegate:com.google.common.collect.BiMap" />
			<role name="Operation()" element="com.google.common.collect.Maps$UnmodifiableBiMap::inverse():com.google.common.collect.BiMap" />
			<role name="Operation()" element="com.google.common.collect.Maps$UnmodifiableBiMap::values():java.util.Set" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.BiMap" />
			<role name="Decorator" element="com.google.common.collect.Synchronized$SynchronizedBiMap" />
			<role name="component" element="com.google.common.collect.Synchronized$SynchronizedBiMap::inverse:com.google.common.collect.BiMap" />
			<role name="Operation()" element="com.google.common.collect.Synchronized$SynchronizedBiMap::inverse():com.google.common.collect.BiMap" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.cache.LocalCache$ValueReference" />
			<role name="Decorator" element="com.google.common.cache.LocalCache$LoadingValueReference" />
			<role name="component" element="com.google.common.cache.LocalCache$LoadingValueReference::oldValue:com.google.common.cache.LocalCache$ValueReference" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingValueReference::isActive():boolean" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingValueReference::getWeight():int" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$LoadingValueReference::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Supplier" />
			<role name="Decorator" element="com.google.common.base.Suppliers$ExpiringMemoizingSupplier" />
			<role name="component" element="com.google.common.base.Suppliers$ExpiringMemoizingSupplier::delegate:com.google.common.base.Supplier" />
			<role name="Operation()" element="com.google.common.base.Suppliers$ExpiringMemoizingSupplier::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Supplier" />
			<role name="Decorator" element="com.google.common.base.Suppliers$MemoizingSupplier" />
			<role name="component" element="com.google.common.base.Suppliers$MemoizingSupplier::delegate:com.google.common.base.Supplier" />
			<role name="Operation()" element="com.google.common.base.Suppliers$MemoizingSupplier::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Supplier" />
			<role name="Decorator" element="com.google.common.base.Suppliers$SupplierComposition" />
			<role name="component" element="com.google.common.base.Suppliers$SupplierComposition::supplier:com.google.common.base.Supplier" />
			<role name="Operation()" element="com.google.common.base.Suppliers$SupplierComposition::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.base.Supplier" />
			<role name="Decorator" element="com.google.common.base.Suppliers$ThreadSafeSupplier" />
			<role name="component" element="com.google.common.base.Suppliers$ThreadSafeSupplier::delegate:com.google.common.base.Supplier" />
			<role name="Operation()" element="com.google.common.base.Suppliers$ThreadSafeSupplier::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.util.concurrent.Service" />
			<role name="Decorator" element="com.google.common.util.concurrent.AbstractExecutionThreadService" />
			<role name="component" element="com.google.common.util.concurrent.AbstractExecutionThreadService::delegate:com.google.common.util.concurrent.Service" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::isRunning():boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::state():com.google.common.util.concurrent.Service$State" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::failureCause():java.lang.Throwable" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitRunning():void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitRunning(long, java.util.concurrent.TimeUnit):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitTerminated():void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitTerminated(long, java.util.concurrent.TimeUnit):void" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.util.concurrent.Service" />
			<role name="Decorator" element="com.google.common.util.concurrent.AbstractIdleService" />
			<role name="component" element="com.google.common.util.concurrent.AbstractIdleService::delegate:com.google.common.util.concurrent.Service" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::isRunning():boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::state():com.google.common.util.concurrent.Service$State" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::failureCause():java.lang.Throwable" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::awaitRunning():void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::awaitRunning(long, java.util.concurrent.TimeUnit):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::awaitTerminated():void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractIdleService::awaitTerminated(long, java.util.concurrent.TimeUnit):void" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Decorator" element="com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference" />
			<role name="component" element="com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference::computedReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Operation()" element="com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference::waitForValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="com.google.common.collect.MapConstraint" />
			<role name="Decorator" element="com.google.common.collect.MapConstraints$InverseConstraint" />
			<role name="component" element="com.google.common.collect.MapConstraints$InverseConstraint::constraint:com.google.common.collect.MapConstraint" />
			<role name="Operation()" element="com.google.common.collect.MapConstraints$InverseConstraint::checkKeyValue(K, V):void" />
		</instance>
	</pattern>
	<pattern name="Observer" />
	<pattern name="State">
		<instance>
			<role name="State" element="com.google.common.collect.Multiset" />
			<role name="Context" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState" />
			<role name="state" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::states:com.google.common.collect.Multiset" />
			<role name="Request()" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::transitionService(com.google.common.util.concurrent.Service, com.google.common.util.concurrent.Service$State, com.google.common.util.concurrent.Service$State):void" />
			<role name="Request()" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::checkHealthy():void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.Multiset" />
			<role name="Context" element="com.google.common.collect.Multisets$MultisetIteratorImpl" />
			<role name="state" element="com.google.common.collect.Multisets$MultisetIteratorImpl::multiset:com.google.common.collect.Multiset" />
			<role name="Request()" element="com.google.common.collect.Multisets$MultisetIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.hash.PrimitiveSink" />
			<role name="Context" element="com.google.common.hash.Funnels$SinkAsStream" />
			<role name="state" element="com.google.common.hash.Funnels$SinkAsStream::sink:com.google.common.hash.PrimitiveSink" />
			<role name="Request()" element="com.google.common.hash.Funnels$SinkAsStream::write(int):void" />
			<role name="Request()" element="com.google.common.hash.Funnels$SinkAsStream::write(byte[]):void" />
			<role name="Request()" element="com.google.common.hash.Funnels$SinkAsStream::write(byte[], int, int):void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.base.CharMatcher" />
			<role name="Context" element="com.google.common.net.InternetDomainName" />
			<role name="state" element="com.google.common.net.InternetDomainName::PART_CHAR_MATCHER:com.google.common.base.CharMatcher" />
			<role name="state" element="com.google.common.net.InternetDomainName::DASH_MATCHER:com.google.common.base.CharMatcher" />
			<role name="Request()" element="com.google.common.net.InternetDomainName::validatePart(java.lang.String, boolean):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.base.CharMatcher" />
			<role name="Context" element="com.google.common.io.BaseEncoding$StandardBaseEncoding$2" />
			<role name="state" element="com.google.common.io.BaseEncoding$StandardBaseEncoding$2::paddingMatcher:com.google.common.base.CharMatcher" />
			<role name="Request()" element="com.google.common.io.BaseEncoding$StandardBaseEncoding$2::read():int" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="Context" element="com.google.common.cache.CacheBuilderSpec" />
			<role name="state" element="com.google.common.cache.CacheBuilderSpec::VALUE_PARSERS:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.cache.CacheBuilderSpec::parse(java.lang.String):com.google.common.cache.CacheBuilderSpec" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="Context" element="com.google.common.reflect.Types$TypeVariableInvocationHandler" />
			<role name="state" element="com.google.common.reflect.Types$TypeVariableInvocationHandler::typeVariableMethods:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.reflect.Types$TypeVariableInvocationHandler::invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="Context" element="com.google.common.collect.Sets$SubSet" />
			<role name="state" element="com.google.common.collect.Sets$SubSet::inputSet:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.Sets$SubSet::contains(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableBiMap" />
			<role name="Context" element="com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm" />
			<role name="state" element="com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm::forward:com.google.common.collect.ImmutableBiMap" />
			<role name="Request()" element="com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm::readResolve():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Lists$TransformingRandomAccessList" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.Lists$TransformingRandomAccessList::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.Lists$TransformingRandomAccessList::get(int):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.Lists$TransformingRandomAccessList::remove(int):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState" />
			<role name="State" element="com.google.common.collect.SetMultimap" />
			<role name="state" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::servicesByState:com.google.common.collect.SetMultimap" />
			<role name="Request()" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::servicesByState():com.google.common.collect.ImmutableMultimap" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MinMaxPriorityQueue$Heap" />
			<role name="State" element="com.google.common.collect.Ordering" />
			<role name="state" element="com.google.common.collect.MinMaxPriorityQueue$Heap::ordering:com.google.common.collect.Ordering" />
			<role name="Request()" element="com.google.common.collect.MinMaxPriorityQueue$Heap::compareElements(int, int):int" />
			<role name="Request()" element="com.google.common.collect.MinMaxPriorityQueue$Heap::bubbleUpAlternatingLevels(int, E):int" />
			<role name="Request()" element="com.google.common.collect.MinMaxPriorityQueue$Heap::crossOverUp(int, E):int" />
			<role name="Request()" element="com.google.common.collect.MinMaxPriorityQueue$Heap::getCorrectLastElement(E):int" />
			<role name="Request()" element="com.google.common.collect.MinMaxPriorityQueue$Heap::crossOver(int, E):int" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Context" element="com.google.common.cache.LocalCache$AccessQueue" />
			<role name="state" element="com.google.common.cache.LocalCache$AccessQueue::head:com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Request()" element="com.google.common.cache.LocalCache$AccessQueue::offer(com.google.common.cache.LocalCache$ReferenceEntry):boolean" />
			<role name="Request()" element="com.google.common.cache.LocalCache$AccessQueue::peek():com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Request()" element="com.google.common.cache.LocalCache$AccessQueue::poll():com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Request()" element="com.google.common.cache.LocalCache$AccessQueue::isEmpty():boolean" />
			<role name="Request()" element="com.google.common.cache.LocalCache$AccessQueue::size():int" />
			<role name="Request()" element="com.google.common.cache.LocalCache$AccessQueue::clear():void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Context" element="com.google.common.cache.LocalCache$WriteQueue" />
			<role name="state" element="com.google.common.cache.LocalCache$WriteQueue::head:com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Request()" element="com.google.common.cache.LocalCache$WriteQueue::offer(com.google.common.cache.LocalCache$ReferenceEntry):boolean" />
			<role name="Request()" element="com.google.common.cache.LocalCache$WriteQueue::peek():com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Request()" element="com.google.common.cache.LocalCache$WriteQueue::poll():com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Request()" element="com.google.common.cache.LocalCache$WriteQueue::isEmpty():boolean" />
			<role name="Request()" element="com.google.common.cache.LocalCache$WriteQueue::size():int" />
			<role name="Request()" element="com.google.common.cache.LocalCache$WriteQueue::clear():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.LongAddables" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.cache.LongAddables::SUPPLIER:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.cache.LongAddables::create():com.google.common.cache.LongAddable" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.FilteredMultimapValues" />
			<role name="State" element="com.google.common.collect.FilteredMultimap" />
			<role name="state" element="com.google.common.collect.FilteredMultimapValues::multimap:com.google.common.collect.FilteredMultimap" />
			<role name="Request()" element="com.google.common.collect.FilteredMultimapValues::remove(java.lang.Object):boolean" />
			<role name="Request()" element="com.google.common.collect.FilteredMultimapValues::removeAll(java.util.Collection):boolean" />
			<role name="Request()" element="com.google.common.collect.FilteredMultimapValues::retainAll(java.util.Collection):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="Context" element="com.google.common.collect.ArrayTable" />
			<role name="state" element="com.google.common.collect.ArrayTable::rowKeyToIndex:com.google.common.collect.ImmutableMap" />
			<role name="state" element="com.google.common.collect.ArrayTable::columnKeyToIndex:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.ArrayTable::get(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.ArrayTable::put(R, C, V):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.ArrayTable::erase(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.ArrayTable::column(C):java.util.Map" />
			<role name="Request()" element="com.google.common.collect.ArrayTable::row(R):java.util.Map" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="Context" element="com.google.common.collect.DenseImmutableTable" />
			<role name="state" element="com.google.common.collect.DenseImmutableTable::rowKeyToIndex:com.google.common.collect.ImmutableMap" />
			<role name="state" element="com.google.common.collect.DenseImmutableTable::columnKeyToIndex:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.DenseImmutableTable::get(java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.TreeMultiset$2" />
			<role name="State" element="com.google.common.collect.Multiset$Entry" />
			<role name="state" element="com.google.common.collect.TreeMultiset$2::prevEntry:com.google.common.collect.Multiset$Entry" />
			<role name="Request()" element="com.google.common.collect.TreeMultiset$2::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.TreeMultiset$3" />
			<role name="State" element="com.google.common.collect.Multiset$Entry" />
			<role name="state" element="com.google.common.collect.TreeMultiset$3::prevEntry:com.google.common.collect.Multiset$Entry" />
			<role name="Request()" element="com.google.common.collect.TreeMultiset$3::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Multisets$MultisetIteratorImpl" />
			<role name="State" element="com.google.common.collect.Multiset$Entry" />
			<role name="state" element="com.google.common.collect.Multisets$MultisetIteratorImpl::currentEntry:com.google.common.collect.Multiset$Entry" />
			<role name="Request()" element="com.google.common.collect.Multisets$MultisetIteratorImpl::next():java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.Multisets$MultisetIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.Multimap" />
			<role name="Context" element="com.google.common.collect.Multimaps$AsMap" />
			<role name="state" element="com.google.common.collect.Multimaps$AsMap::multimap:com.google.common.collect.Multimap" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::size():int" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::removeValuesForKey(java.lang.Object):void" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::get(java.lang.Object):java.util.Collection" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::remove(java.lang.Object):java.util.Collection" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::keySet():java.util.Set" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::isEmpty():boolean" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::containsKey(java.lang.Object):boolean" />
			<role name="Request()" element="com.google.common.collect.Multimaps$AsMap::clear():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ImmutableRangeMap$Builder" />
			<role name="State" element="com.google.common.collect.RangeSet" />
			<role name="state" element="com.google.common.collect.ImmutableRangeMap$Builder::keyRanges:com.google.common.collect.RangeSet" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeMap$Builder::put(com.google.common.collect.Range, V):com.google.common.collect.ImmutableRangeMap$Builder" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ImmutableRangeSet$Builder" />
			<role name="State" element="com.google.common.collect.RangeSet" />
			<role name="state" element="com.google.common.collect.ImmutableRangeSet$Builder::rangeSet:com.google.common.collect.RangeSet" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeSet$Builder::add(com.google.common.collect.Range):com.google.common.collect.ImmutableRangeSet$Builder" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ImmutableMultimap$Builder" />
			<role name="State" element="com.google.common.collect.Multimap" />
			<role name="state" element="com.google.common.collect.ImmutableMultimap$Builder::builderMultimap:com.google.common.collect.Multimap" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultimap$Builder::put(K, V):com.google.common.collect.ImmutableMultimap$Builder" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultimap$Builder::putAll(K, java.lang.Iterable):com.google.common.collect.ImmutableMultimap$Builder" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultimap$Builder::build():com.google.common.collect.ImmutableMultimap" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.hash.HashingInputStream" />
			<role name="State" element="com.google.common.hash.Hasher" />
			<role name="state" element="com.google.common.hash.HashingInputStream::hasher:com.google.common.hash.Hasher" />
			<role name="Request()" element="com.google.common.hash.HashingInputStream::read():int" />
			<role name="Request()" element="com.google.common.hash.HashingInputStream::read(byte[], int, int):int" />
			<role name="Request()" element="com.google.common.hash.HashingInputStream::hash():com.google.common.hash.HashCode" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.hash.HashingOutputStream" />
			<role name="State" element="com.google.common.hash.Hasher" />
			<role name="state" element="com.google.common.hash.HashingOutputStream::hasher:com.google.common.hash.Hasher" />
			<role name="Request()" element="com.google.common.hash.HashingOutputStream::write(int):void" />
			<role name="Request()" element="com.google.common.hash.HashingOutputStream::write(byte[], int, int):void" />
			<role name="Request()" element="com.google.common.hash.HashingOutputStream::hash():com.google.common.hash.HashCode" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.LocalCache" />
			<role name="State" element="com.google.common.cache.AbstractCache$StatsCounter" />
			<role name="state" element="com.google.common.cache.LocalCache::globalStatsCounter:com.google.common.cache.AbstractCache$StatsCounter" />
			<role name="Request()" element="com.google.common.cache.LocalCache::getIfPresent(java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache::getAllPresent(java.lang.Iterable):com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.cache.LocalCache::getAll(java.lang.Iterable):com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.cache.LocalCache::loadAll(java.util.Set, com.google.common.cache.CacheLoader):java.util.Map" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.LocalCache$Segment" />
			<role name="State" element="com.google.common.cache.AbstractCache$StatsCounter" />
			<role name="state" element="com.google.common.cache.LocalCache$Segment::statsCounter:com.google.common.cache.AbstractCache$StatsCounter" />
			<role name="Request()" element="com.google.common.cache.LocalCache$Segment::get(K, int, com.google.common.cache.CacheLoader):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache$Segment::lockedGetOrLoad(K, int, com.google.common.cache.CacheLoader):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache$Segment::waitForLoadingValue(com.google.common.cache.LocalCache$ReferenceEntry, K, com.google.common.cache.LocalCache$ValueReference):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache$Segment::getAndRecordStats(K, int, com.google.common.cache.LocalCache$LoadingValueReference, com.google.common.util.concurrent.ListenableFuture):java.lang.Object" />
			<role name="Request()" element="com.google.common.cache.LocalCache$Segment::enqueueNotification(K, int, com.google.common.cache.LocalCache$ValueReference, com.google.common.cache.RemovalCause):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ImmutableMultiset$Builder" />
			<role name="State" element="com.google.common.collect.Multiset" />
			<role name="state" element="com.google.common.collect.ImmutableMultiset$Builder::contents:com.google.common.collect.Multiset" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultiset$Builder::add(E):com.google.common.collect.ImmutableMultiset$Builder" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultiset$Builder::addCopies(E, int):com.google.common.collect.ImmutableMultiset$Builder" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultiset$Builder::setCount(E, int):com.google.common.collect.ImmutableMultiset$Builder" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Range" />
			<role name="State" element="com.google.common.collect.Cut" />
			<role name="state" element="com.google.common.collect.Range::lowerBound:com.google.common.collect.Cut" />
			<role name="state" element="com.google.common.collect.Range::upperBound:com.google.common.collect.Cut" />
			<role name="Request()" element="com.google.common.collect.Range::lowerBoundType():com.google.common.collect.BoundType" />
			<role name="Request()" element="com.google.common.collect.Range::upperBoundType():com.google.common.collect.BoundType" />
			<role name="Request()" element="com.google.common.collect.Range::contains(C):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ImmutableRangeMap$Builder" />
			<role name="State" element="com.google.common.collect.RangeMap" />
			<role name="state" element="com.google.common.collect.ImmutableRangeMap$Builder::rangeMap:com.google.common.collect.RangeMap" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeMap$Builder::put(com.google.common.collect.Range, V):com.google.common.collect.ImmutableRangeMap$Builder" />
			<role name="Request()" element="com.google.common.collect.ImmutableRangeMap$Builder::build():com.google.common.collect.ImmutableRangeMap" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.Multimap" />
			<role name="Context" element="com.google.common.collect.Multimaps$Keys" />
			<role name="state" element="com.google.common.collect.Multimaps$Keys::multimap:com.google.common.collect.Multimap" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::entryIterator():java.util.Iterator" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::distinctElements():int" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::contains(java.lang.Object):boolean" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::iterator():java.util.Iterator" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::count(java.lang.Object):int" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::remove(java.lang.Object, int):int" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::clear():void" />
			<role name="Request()" element="com.google.common.collect.Multimaps$Keys::elementSet():java.util.Set" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.eventbus.SubscriberRegistry" />
			<role name="State" element="com.google.common.cache.LoadingCache" />
			<role name="state" element="com.google.common.eventbus.SubscriberRegistry::subscriberMethodsCache:com.google.common.cache.LoadingCache" />
			<role name="state" element="com.google.common.eventbus.SubscriberRegistry::flattenHierarchyCache:com.google.common.cache.LoadingCache" />
			<role name="Request()" element="com.google.common.eventbus.SubscriberRegistry::getAnnotatedMethods(java.lang.Class):com.google.common.collect.ImmutableList" />
			<role name="Request()" element="com.google.common.eventbus.SubscriberRegistry::flattenHierarchy(java.lang.Class):com.google.common.collect.ImmutableSet" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::head:com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry):boolean" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::peek():com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::poll():com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::isEmpty():boolean" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::size():int" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$EvictionQueue::clear():void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::head:com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry):boolean" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::peek():com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::poll():com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::isEmpty():boolean" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::size():int" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$ExpirationQueue::clear():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1" />
			<role name="State" element="com.google.common.collect.Cut" />
			<role name="state" element="com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1::nextComplementRangeLowerBound:com.google.common.collect.Cut" />
			<role name="Request()" element="com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1::computeNext():java.util.Map$Entry" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2" />
			<role name="State" element="com.google.common.collect.Cut" />
			<role name="state" element="com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2::nextComplementRangeUpperBound:com.google.common.collect.Cut" />
			<role name="Request()" element="com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2::computeNext():java.util.Map$Entry" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Tables$TransformedTable" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.Tables$TransformedTable::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.Tables$TransformedTable::get(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.Tables$TransformedTable::remove(java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Constraints$ConstrainedCollection" />
			<role name="State" element="com.google.common.collect.Constraint" />
			<role name="state" element="com.google.common.collect.Constraints$ConstrainedCollection::constraint:com.google.common.collect.Constraint" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedCollection::add(E):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Constraints$ConstrainedList" />
			<role name="State" element="com.google.common.collect.Constraint" />
			<role name="state" element="com.google.common.collect.Constraints$ConstrainedList::constraint:com.google.common.collect.Constraint" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedList::add(E):boolean" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedList::add(int, E):void" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedList::set(int, E):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Constraints$ConstrainedListIterator" />
			<role name="State" element="com.google.common.collect.Constraint" />
			<role name="state" element="com.google.common.collect.Constraints$ConstrainedListIterator::constraint:com.google.common.collect.Constraint" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedListIterator::add(E):void" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedListIterator::set(E):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Constraints$ConstrainedSet" />
			<role name="State" element="com.google.common.collect.Constraint" />
			<role name="state" element="com.google.common.collect.Constraints$ConstrainedSet::constraint:com.google.common.collect.Constraint" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedSet::add(E):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Constraints$ConstrainedSortedSet" />
			<role name="State" element="com.google.common.collect.Constraint" />
			<role name="state" element="com.google.common.collect.Constraints$ConstrainedSortedSet::constraint:com.google.common.collect.Constraint" />
			<role name="Request()" element="com.google.common.collect.Constraints$ConstrainedSortedSet::add(E):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ExplicitOrdering" />
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="state" element="com.google.common.collect.ExplicitOrdering::rankMap:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.ExplicitOrdering::rank(T):int" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.util.concurrent.Striped$LargeLazyStriped" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.util.concurrent.Striped$LargeLazyStriped::supplier:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.util.concurrent.Striped$LargeLazyStriped::getAt(int):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.util.concurrent.Striped$SmallLazyStriped" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.util.concurrent.Striped$SmallLazyStriped::supplier:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.util.concurrent.Striped$SmallLazyStriped::getAt(int):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.base.Predicates$CompositionPredicate" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.base.Predicates$CompositionPredicate::f:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.base.Predicates$CompositionPredicate::apply(A):boolean" />
			<role name="Request()" element="com.google.common.base.Predicates$CompositionPredicate::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.base.Functions$PredicateFunction" />
			<role name="State" element="com.google.common.base.Predicate" />
			<role name="state" element="com.google.common.base.Functions$PredicateFunction::predicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.base.Functions$PredicateFunction::apply(T):java.lang.Boolean" />
			<role name="Request()" element="com.google.common.base.Functions$PredicateFunction::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.base.Ticker" />
			<role name="Context" element="com.google.common.cache.LocalCache" />
			<role name="state" element="com.google.common.cache.LocalCache::ticker:com.google.common.base.Ticker" />
			<role name="Request()" element="com.google.common.cache.LocalCache::containsValue(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.base.Ticker" />
			<role name="Context" element="com.google.common.base.Stopwatch" />
			<role name="state" element="com.google.common.base.Stopwatch::ticker:com.google.common.base.Ticker" />
			<role name="Request()" element="com.google.common.base.Stopwatch::start():com.google.common.base.Stopwatch" />
			<role name="Request()" element="com.google.common.base.Stopwatch::stop():com.google.common.base.Stopwatch" />
			<role name="Request()" element="com.google.common.base.Stopwatch::elapsedNanos():long" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.MapConstraint" />
			<role name="Context" element="com.google.common.collect.MapConstraints$ConstrainedMap" />
			<role name="state" element="com.google.common.collect.MapConstraints$ConstrainedMap::constraint:com.google.common.collect.MapConstraint" />
			<role name="Request()" element="com.google.common.collect.MapConstraints$ConstrainedMap::put(K, V):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.MapConstraint" />
			<role name="Context" element="com.google.common.collect.MapConstraints$ConstrainedMultimap" />
			<role name="state" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::constraint:com.google.common.collect.MapConstraint" />
			<role name="Request()" element="com.google.common.collect.MapConstraints$ConstrainedMultimap::put(K, V):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState" />
			<role name="State" element="com.google.common.util.concurrent.Monitor$Guard" />
			<role name="state" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::stoppedGuard:com.google.common.util.concurrent.Monitor$Guard" />
			<role name="Request()" element="com.google.common.util.concurrent.ServiceManager$ServiceManagerState::addListener(com.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ImmutableClassToInstanceMap" />
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="state" element="com.google.common.collect.ImmutableClassToInstanceMap::delegate:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.collect.ImmutableClassToInstanceMap::getInstance():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.reflect.ImmutableTypeToInstanceMap" />
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="state" element="com.google.common.reflect.ImmutableTypeToInstanceMap::delegate:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.reflect.ImmutableTypeToInstanceMap::trustedGet():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ConcurrentHashMultiset$3" />
			<role name="State" element="com.google.common.collect.Multiset$Entry" />
			<role name="state" element="com.google.common.collect.ConcurrentHashMultiset$3::last:com.google.common.collect.Multiset$Entry" />
			<role name="Request()" element="com.google.common.collect.ConcurrentHashMultiset$3::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Maps$FilteredKeyMap" />
			<role name="State" element="com.google.common.base.Predicate" />
			<role name="state" element="com.google.common.collect.Maps$FilteredKeyMap::keyPredicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.collect.Maps$FilteredKeyMap::containsKey(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.base.Suppliers$SupplierComposition" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.base.Suppliers$SupplierComposition::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.base.Suppliers$SupplierComposition::get():java.lang.Object" />
			<role name="Request()" element="com.google.common.base.Suppliers$SupplierComposition::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.base.Functions$SupplierFunction" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.base.Functions$SupplierFunction::supplier:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.base.Functions$SupplierFunction::apply(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.FilteredEntryMultimap" />
			<role name="State" element="com.google.common.base.Predicate" />
			<role name="state" element="com.google.common.collect.FilteredEntryMultimap::predicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.collect.FilteredEntryMultimap::satisfies(K, V):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.FilteredKeyMultimap" />
			<role name="State" element="com.google.common.base.Predicate" />
			<role name="state" element="com.google.common.collect.FilteredKeyMultimap::keyPredicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.collect.FilteredKeyMultimap::containsKey(java.lang.Object):boolean" />
			<role name="Request()" element="com.google.common.collect.FilteredKeyMultimap::get(K):java.util.Collection" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.LocalCache" />
			<role name="State" element="com.google.common.cache.RemovalListener" />
			<role name="state" element="com.google.common.cache.LocalCache::removalListener:com.google.common.cache.RemovalListener" />
			<role name="Request()" element="com.google.common.cache.LocalCache::processPendingNotifications():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.util.concurrent.Futures$MappingCheckedFuture" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.util.concurrent.Futures$MappingCheckedFuture::mapper:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.util.concurrent.Futures$MappingCheckedFuture::mapException(java.lang.Exception):java.lang.Exception" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Multimaps$CustomListMultimap" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.collect.Multimaps$CustomListMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomListMultimap::createCollection():java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Multimaps$CustomMultimap" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.collect.Multimaps$CustomMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomMultimap::createCollection():java.util.Collection" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Multimaps$CustomSetMultimap" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.collect.Multimaps$CustomSetMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomSetMultimap::createCollection():java.util.Set" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap::createCollection():java.util.SortedSet" />
			<role name="Request()" element="com.google.common.collect.Multimaps$CustomSortedSetMultimap::readObject(java.io.ObjectInputStream):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.AbstractCache$SimpleStatsCounter" />
			<role name="State" element="com.google.common.cache.LongAddable" />
			<role name="state" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::hitCount:com.google.common.cache.LongAddable" />
			<role name="state" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::missCount:com.google.common.cache.LongAddable" />
			<role name="state" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::loadSuccessCount:com.google.common.cache.LongAddable" />
			<role name="state" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::totalLoadTime:com.google.common.cache.LongAddable" />
			<role name="state" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::loadExceptionCount:com.google.common.cache.LongAddable" />
			<role name="state" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::evictionCount:com.google.common.cache.LongAddable" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordHits(int):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordMisses(int):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordLoadSuccess(long):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordLoadException(long):void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::recordEviction():void" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::snapshot():com.google.common.cache.CacheStats" />
			<role name="Request()" element="com.google.common.cache.AbstractCache$SimpleStatsCounter::incrementBy(com.google.common.cache.AbstractCache$StatsCounter):void" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.ImmutableMap" />
			<role name="Context" element="com.google.common.reflect.TypeResolver$TypeTable" />
			<role name="state" element="com.google.common.reflect.TypeResolver$TypeTable::map:com.google.common.collect.ImmutableMap" />
			<role name="Request()" element="com.google.common.reflect.TypeResolver$TypeTable::resolveInternal(java.lang.reflect.TypeVariable, com.google.common.reflect.TypeResolver$TypeTable):java.lang.reflect.Type" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap$SoftEntry" />
			<role name="State" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap$SoftEntry::valueReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$SoftEntry::setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap$StrongEntry" />
			<role name="State" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap$StrongEntry::valueReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$StrongEntry::setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap$WeakEntry" />
			<role name="State" element="com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap$WeakEntry::valueReference:com.google.common.collect.MapMakerInternalMap$ValueReference" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap$WeakEntry::setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ByFunctionOrdering" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.ByFunctionOrdering::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.ByFunctionOrdering::compare(F, F):int" />
			<role name="Request()" element="com.google.common.collect.ByFunctionOrdering::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.StandardTable" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.collect.StandardTable::factory:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.collect.StandardTable::getOrCreate(R):java.util.Map" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.eventbus.EventBus" />
			<role name="State" element="com.google.common.eventbus.Dispatcher" />
			<role name="state" element="com.google.common.eventbus.EventBus::dispatcher:com.google.common.eventbus.Dispatcher" />
			<role name="Request()" element="com.google.common.eventbus.EventBus::post(java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.base.FunctionalEquivalence" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.base.FunctionalEquivalence::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.base.FunctionalEquivalence::doEquivalent(F, F):boolean" />
			<role name="Request()" element="com.google.common.base.FunctionalEquivalence::doHash(F):int" />
			<role name="Request()" element="com.google.common.base.FunctionalEquivalence::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.google.common.collect.BiMap" />
			<role name="Context" element="com.google.common.collect.Maps$BiMapConverter" />
			<role name="state" element="com.google.common.collect.Maps$BiMapConverter::bimap:com.google.common.collect.BiMap" />
			<role name="Request()" element="com.google.common.collect.Maps$BiMapConverter::doBackward(B):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Multisets$FilteredMultiset" />
			<role name="State" element="com.google.common.base.Predicate" />
			<role name="state" element="com.google.common.collect.Multisets$FilteredMultiset::predicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.collect.Multisets$FilteredMultiset::count(java.lang.Object):int" />
			<role name="Request()" element="com.google.common.collect.Multisets$FilteredMultiset::add(E, int):int" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.RemovalNotification" />
			<role name="State" element="com.google.common.cache.RemovalCause" />
			<role name="state" element="com.google.common.cache.RemovalNotification::cause:com.google.common.cache.RemovalCause" />
			<role name="Request()" element="com.google.common.cache.RemovalNotification::wasEvicted():boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Collections2$FilteredCollection" />
			<role name="State" element="com.google.common.base.Predicate" />
			<role name="state" element="com.google.common.collect.Collections2$FilteredCollection::predicate:com.google.common.base.Predicate" />
			<role name="Request()" element="com.google.common.collect.Collections2$FilteredCollection::add(E):boolean" />
			<role name="Request()" element="com.google.common.collect.Collections2$FilteredCollection::addAll(java.util.Collection):boolean" />
			<role name="Request()" element="com.google.common.collect.Collections2$FilteredCollection::contains(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Maps$AsMapView" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.Maps$AsMapView::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.Maps$AsMapView::get(java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.Maps$AsMapView::remove(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.eventbus.EventBus" />
			<role name="State" element="com.google.common.eventbus.SubscriberExceptionHandler" />
			<role name="state" element="com.google.common.eventbus.EventBus::exceptionHandler:com.google.common.eventbus.SubscriberExceptionHandler" />
			<role name="Request()" element="com.google.common.eventbus.EventBus::handleSubscriberException(java.lang.Throwable, com.google.common.eventbus.SubscriberExceptionContext):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.io.Closer" />
			<role name="State" element="com.google.common.io.Closer$Suppressor" />
			<role name="state" element="com.google.common.io.Closer::suppressor:com.google.common.io.Closer$Suppressor" />
			<role name="Request()" element="com.google.common.io.Closer::close():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.reflect.ClassPath$DefaultScanner" />
			<role name="State" element="com.google.common.collect.SetMultimap" />
			<role name="state" element="com.google.common.reflect.ClassPath$DefaultScanner::resources:com.google.common.collect.SetMultimap" />
			<role name="Request()" element="com.google.common.reflect.ClassPath$DefaultScanner::getResources():com.google.common.collect.ImmutableSet" />
			<role name="Request()" element="com.google.common.reflect.ClassPath$DefaultScanner::scanJarFile(java.lang.ClassLoader, java.util.jar.JarFile):void" />
			<role name="Request()" element="com.google.common.reflect.ClassPath$DefaultScanner::scanDirectory(java.io.File, java.lang.ClassLoader, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Interners$InternerFunction" />
			<role name="State" element="com.google.common.collect.Interner" />
			<role name="state" element="com.google.common.collect.Interners$InternerFunction::interner:com.google.common.collect.Interner" />
			<role name="Request()" element="com.google.common.collect.Interners$InternerFunction::apply(E):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference::computingFunction:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference::compute(K, int):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap" />
			<role name="State" element="com.google.common.base.Ticker" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap::ticker:com.google.common.base.Ticker" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap::isExpired(com.google.common.collect.MapMakerInternalMap$ReferenceEntry):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.CacheLoader$FunctionToCacheLoader" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.cache.CacheLoader$FunctionToCacheLoader::computingFunction:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.cache.CacheLoader$FunctionToCacheLoader::load(K):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.cache.CacheLoader$SupplierToCacheLoader" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.cache.CacheLoader$SupplierToCacheLoader::computingSupplier:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.cache.CacheLoader$SupplierToCacheLoader::load(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMaker$RemovalNotification" />
			<role name="State" element="com.google.common.collect.MapMaker$RemovalCause" />
			<role name="state" element="com.google.common.collect.MapMaker$RemovalNotification::cause:com.google.common.collect.MapMaker$RemovalCause" />
			<role name="Request()" element="com.google.common.collect.MapMaker$RemovalNotification::wasEvicted():boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMaker$NullComputingConcurrentMap" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.MapMaker$NullComputingConcurrentMap::computingFunction:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.MapMaker$NullComputingConcurrentMap::compute(K):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMaker$NullConcurrentMap" />
			<role name="State" element="com.google.common.collect.MapMaker$RemovalListener" />
			<role name="state" element="com.google.common.collect.MapMaker$NullConcurrentMap::removalListener:com.google.common.collect.MapMaker$RemovalListener" />
			<role name="Request()" element="com.google.common.collect.MapMaker$NullConcurrentMap::notifyRemoval(K, V):void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.MapMakerInternalMap" />
			<role name="State" element="com.google.common.collect.MapMaker$RemovalListener" />
			<role name="state" element="com.google.common.collect.MapMakerInternalMap::removalListener:com.google.common.collect.MapMaker$RemovalListener" />
			<role name="Request()" element="com.google.common.collect.MapMakerInternalMap::processPendingNotifications():void" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.collect.Maps$NavigableAsMapView" />
			<role name="State" element="com.google.common.base.Function" />
			<role name="state" element="com.google.common.collect.Maps$NavigableAsMapView::function:com.google.common.base.Function" />
			<role name="Request()" element="com.google.common.collect.Maps$NavigableAsMapView::get(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.hash.ChecksumHashFunction" />
			<role name="State" element="com.google.common.base.Supplier" />
			<role name="state" element="com.google.common.hash.ChecksumHashFunction::checksumSupplier:com.google.common.base.Supplier" />
			<role name="Request()" element="com.google.common.hash.ChecksumHashFunction::newHasher():com.google.common.hash.Hasher" />
		</instance>
	</pattern>
	<pattern name="Strategy">
		<instance>
			<role name="Context" element="com.google.common.base.Splitter" />
			<role name="Strategy" element="com.google.common.base.Splitter$Strategy" />
			<role name="strategy" element="com.google.common.base.Splitter::strategy:com.google.common.base.Splitter$Strategy" />
			<role name="ContextInterface()" element="com.google.common.base.Splitter::splittingIterator(java.lang.CharSequence):java.util.Iterator" />
		</instance>
		<instance>
			<role name="Context" element="com.google.common.hash.BloomFilter" />
			<role name="Strategy" element="com.google.common.hash.BloomFilter$Strategy" />
			<role name="strategy" element="com.google.common.hash.BloomFilter::strategy:com.google.common.hash.BloomFilter$Strategy" />
			<role name="ContextInterface()" element="com.google.common.hash.BloomFilter::writeTo(java.io.OutputStream):void" />
		</instance>
	</pattern>
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="com.google.common.util.concurrent.AbstractFuture" />
			<role name="Implementor" element="com.google.common.util.concurrent.AbstractFuture$AtomicHelper" />
			<role name="implementor" element="com.google.common.util.concurrent.AbstractFuture::ATOMIC_HELPER:com.google.common.util.concurrent.AbstractFuture$AtomicHelper" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::get(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::get():java.lang.Object" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::cancel(boolean):boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::addListener(java.lang.Runnable, java.util.concurrent.Executor):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::set(V):boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::setException(java.lang.Throwable):boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::setFuture(com.google.common.util.concurrent.ListenableFuture):boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::completeWithFuture(com.google.common.util.concurrent.ListenableFuture, java.lang.Object):boolean" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::clearWaiters():com.google.common.util.concurrent.AbstractFuture$Waiter" />
			<role name="Operation()" element="com.google.common.util.concurrent.AbstractFuture::clearListeners():com.google.common.util.concurrent.AbstractFuture$Listener" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.collect.ImmutableMultimap" />
			<role name="Implementor" element="com.google.common.collect.ImmutableMap" />
			<role name="implementor" element="com.google.common.collect.ImmutableMultimap::map:com.google.common.collect.ImmutableMap" />
			<role name="Operation()" element="com.google.common.collect.ImmutableMultimap::isPartialView():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.collect.ArrayTable$ArrayMap" />
			<role name="Implementor" element="com.google.common.collect.ImmutableMap" />
			<role name="implementor" element="com.google.common.collect.ArrayTable$ArrayMap::keyIndex:com.google.common.collect.ImmutableMap" />
			<role name="Operation()" element="com.google.common.collect.ArrayTable$ArrayMap::get(java.lang.Object):java.lang.Object" />
			<role name="Operation()" element="com.google.common.collect.ArrayTable$ArrayMap::put(K, V):java.lang.Object" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.collect.Maps$AbstractFilteredMap" />
			<role name="Implementor" element="com.google.common.base.Predicate" />
			<role name="implementor" element="com.google.common.collect.Maps$AbstractFilteredMap::predicate:com.google.common.base.Predicate" />
			<role name="Operation()" element="com.google.common.collect.Maps$AbstractFilteredMap::apply(java.lang.Object, V):boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.util.concurrent.RateLimiter" />
			<role name="Implementor" element="com.google.common.util.concurrent.RateLimiter$SleepingStopwatch" />
			<role name="implementor" element="com.google.common.util.concurrent.RateLimiter::stopwatch:com.google.common.util.concurrent.RateLimiter$SleepingStopwatch" />
			<role name="Operation()" element="com.google.common.util.concurrent.RateLimiter::setRate(double):void" />
			<role name="Operation()" element="com.google.common.util.concurrent.RateLimiter::acquire(int):double" />
			<role name="Operation()" element="com.google.common.util.concurrent.RateLimiter::reserve(int):long" />
			<role name="Operation()" element="com.google.common.util.concurrent.RateLimiter::tryAcquire(int, long, java.util.concurrent.TimeUnit):boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.base.Splitter$SplittingIterator" />
			<role name="Implementor" element="com.google.common.base.CharMatcher" />
			<role name="implementor" element="com.google.common.base.Splitter$SplittingIterator::trimmer:com.google.common.base.CharMatcher" />
			<role name="Operation()" element="com.google.common.base.Splitter$SplittingIterator::computeNext():java.lang.String" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.cache.LocalCache$HashIterator" />
			<role name="Implementor" element="com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="implementor" element="com.google.common.cache.LocalCache$HashIterator::nextEntry:com.google.common.cache.LocalCache$ReferenceEntry" />
			<role name="Operation()" element="com.google.common.cache.LocalCache$HashIterator::nextInChain():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.google.common.collect.MapMakerInternalMap$HashIterator" />
			<role name="Implementor" element="com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="implementor" element="com.google.common.collect.MapMakerInternalMap$HashIterator::nextEntry:com.google.common.collect.MapMakerInternalMap$ReferenceEntry" />
			<role name="Operation()" element="com.google.common.collect.MapMakerInternalMap$HashIterator::nextInChain():boolean" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.google.common.base.AbstractIterator" />
			<role name="TemplateMethod()" element="com.google.common.base.AbstractIterator::tryToComputeNext():boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.base.CaseFormat" />
			<role name="TemplateMethod()" element="com.google.common.base.CaseFormat::convert(com.google.common.base.CaseFormat, java.lang.String):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CaseFormat::normalizeFirstWord(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.base.CharMatcher" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::setBits(java.util.BitSet):void" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::matchesAllOf(java.lang.CharSequence):boolean" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::indexIn(java.lang.CharSequence, int):int" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::lastIndexIn(java.lang.CharSequence):int" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::countIn(java.lang.CharSequence):int" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::removeFrom(java.lang.CharSequence):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::replaceFrom(java.lang.CharSequence, char):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::trimFrom(java.lang.CharSequence):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::trimLeadingFrom(java.lang.CharSequence):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::trimTrailingFrom(java.lang.CharSequence):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::collapseFrom(java.lang.CharSequence, char):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::trimAndCollapseFrom(java.lang.CharSequence, char):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::finishCollapseFrom(java.lang.CharSequence, int, int, char, java.lang.StringBuilder, boolean):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.base.CharMatcher::apply(java.lang.Character):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.base.Converter" />
			<role name="TemplateMethod()" element="com.google.common.base.Converter::correctedDoForward(A):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.base.Converter::correctedDoBackward(B):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.base.Equivalence" />
			<role name="TemplateMethod()" element="com.google.common.base.Equivalence::equivalent(T, T):boolean" />
			<role name="TemplateMethod()" element="com.google.common.base.Equivalence::hash(T):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.base.Splitter$SplittingIterator" />
			<role name="TemplateMethod()" element="com.google.common.base.Splitter$SplittingIterator::computeNext():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.CacheBuilderSpec$DurationParser" />
			<role name="TemplateMethod()" element="com.google.common.cache.CacheBuilderSpec$DurationParser::parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.CacheBuilderSpec$IntegerParser" />
			<role name="TemplateMethod()" element="com.google.common.cache.CacheBuilderSpec$IntegerParser::parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.CacheBuilderSpec$LongParser" />
			<role name="TemplateMethod()" element="com.google.common.cache.CacheBuilderSpec$LongParser::parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.CacheLoader" />
			<role name="TemplateMethod()" element="com.google.common.cache.CacheLoader::reload(K, V):com.google.common.util.concurrent.ListenableFuture" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.ForwardingCache" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::getIfPresent(java.lang.Object):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::get(K, java.util.concurrent.Callable):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::getAllPresent(java.lang.Iterable):com.google.common.collect.ImmutableMap" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::put(K, V):void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::putAll(java.util.Map):void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::invalidate(java.lang.Object):void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::invalidateAll(java.lang.Iterable):void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::invalidateAll():void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::size():long" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::stats():com.google.common.cache.CacheStats" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::asMap():java.util.concurrent.ConcurrentMap" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::cleanUp():void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingCache::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.ForwardingLoadingCache" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::get(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::getUnchecked(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::getAll(java.lang.Iterable):com.google.common.collect.ImmutableMap" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::apply(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::refresh(K):void" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::delegate():com.google.common.cache.Cache" />
			<role name="TemplateMethod()" element="com.google.common.cache.ForwardingLoadingCache::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.cache.Striped64" />
			<role name="TemplateMethod()" element="com.google.common.cache.Striped64::retryUpdate(long, int[], boolean):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractIndexedListIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractIndexedListIterator::next():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractIndexedListIterator::previous():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractIterator::tryToComputeNext():boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractListMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractListMultimap::createCollection():java.util.Collection" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractMapBasedMultimap$Itr" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapBasedMultimap$Itr::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractMapBasedMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapBasedMultimap::createUnmodifiableEmptyCollection():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapBasedMultimap::createCollection(K):java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapBasedMultimap::replaceValues(K, java.lang.Iterable):java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapBasedMultimap::removeAll(java.lang.Object):java.util.Collection" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractMapEntry" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapEntry::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapEntry::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMapEntry::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMultimap::asMap():java.util.Map" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractMultiset::clear():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractNavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractNavigableMap::lastEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractNavigableMap::pollLastEntry():java.util.Map$Entry" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractRangeSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractRangeSet::contains(C):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractRangeSet::enclosesAll(com.google.common.collect.RangeSet):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractSequentialIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSequentialIterator::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractSetMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSetMultimap::createCollection():java.util.Collection" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractSortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSortedMultiset::lastEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSortedMultiset::pollLastEntry():com.google.common.collect.Multiset$Entry" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.AbstractSortedSetMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSortedSetMultimap::createUnmodifiableEmptyCollection():java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSortedSetMultimap::createCollection():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.AbstractSortedSetMultimap::createCollection():java.util.Collection" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ArrayTable$ArrayMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ArrayTable$ArrayMap::get(java.lang.Object):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ArrayTable$ArrayMap::put(K, V):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ComparisonChain" />
			<role name="TemplateMethod()" element="com.google.common.collect.ComparisonChain::compare(java.lang.Boolean, java.lang.Boolean):com.google.common.collect.ComparisonChain" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::headSet(C):com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::headSet(C, boolean):com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::subSet(C, C):com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::subSet(C, boolean, C, boolean):com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::tailSet(C):com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::tailSet(C, boolean):com.google.common.collect.ContiguousSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::toString():java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::tailSetImpl(java.lang.Object, boolean):com.google.common.collect.ImmutableSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean):com.google.common.collect.ImmutableSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ContiguousSet::headSetImpl(java.lang.Object, boolean):com.google.common.collect.ImmutableSortedSet" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.DenseImmutableTable$ImmutableArrayMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.DenseImmutableTable$ImmutableArrayMap::isFull():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.DenseImmutableTable$ImmutableArrayMap::getKey(int):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.DenseImmutableTable$ImmutableArrayMap::createKeySet():com.google.common.collect.ImmutableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.DenseImmutableTable$ImmutableArrayMap::get(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.DescendingMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::comparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::pollFirstEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::pollLastEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::headMultiset(E, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::tailMultiset(E, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::delegate():com.google.common.collect.Multiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::descendingMultiset():com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::firstEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.DescendingMultiset::lastEntry():com.google.common.collect.Multiset$Entry" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingBlockingDeque" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::remainingCapacity():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::putFirst(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::putLast(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::offerFirst(E, long, java.util.concurrent.TimeUnit):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::offerLast(E, long, java.util.concurrent.TimeUnit):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::takeFirst():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::takeLast():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::pollFirst(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::pollLast(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::put(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::offer(E, long, java.util.concurrent.TimeUnit):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::take():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::poll(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::drainTo(java.util.Collection):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::drainTo(java.util.Collection, int):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::delegate():java.util.Deque" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::delegate():java.util.Queue" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingBlockingDeque::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingCollection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::iterator():java.util.Iterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::removeAll(java.util.Collection):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::add(E):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::remove(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::containsAll(java.util.Collection):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::addAll(java.util.Collection):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::retainAll(java.util.Collection):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::clear():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::toArray():java.lang.Object[]" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingCollection::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingConcurrentMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingConcurrentMap::putIfAbsent(K, V):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingConcurrentMap::remove(java.lang.Object, java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingConcurrentMap::replace(K, V):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingConcurrentMap::replace(K, V, V):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingConcurrentMap::delegate():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingConcurrentMap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingDeque" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::addFirst(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::addLast(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::descendingIterator():java.util.Iterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::getFirst():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::getLast():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::offerFirst(E):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::offerLast(E):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::peekFirst():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::peekLast():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::pollFirst():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::pollLast():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::pop():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::push(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::removeFirst():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::removeLast():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::removeFirstOccurrence(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::removeLastOccurrence(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::delegate():java.util.Queue" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingDeque::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingIterator::hasNext():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingIterator::next():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingIterator::remove():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingIterator::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingList" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::add(int, E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::addAll(int, java.util.Collection):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::get(int):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::indexOf(java.lang.Object):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::lastIndexOf(java.lang.Object):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::listIterator():java.util.ListIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::listIterator(int):java.util.ListIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::remove(int):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::set(int, E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::subList(int, int):java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingList::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingListIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::add(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::hasPrevious():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::nextIndex():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::previous():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::previousIndex():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::set(E):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::delegate():java.util.Iterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListIterator::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingListMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListMultimap::get(K):java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListMultimap::removeAll(java.lang.Object):java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListMultimap::replaceValues(K, java.lang.Iterable):java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListMultimap::delegate():com.google.common.collect.Multimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingListMultimap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::remove(java.lang.Object):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::clear():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::containsKey(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::containsValue(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::get(java.lang.Object):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::put(K, V):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::putAll(java.util.Map):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::keySet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::values():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::entrySet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingMapEntry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMapEntry::getKey():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMapEntry::getValue():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMapEntry::setValue(V):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMapEntry::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMapEntry::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMapEntry::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::asMap():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::clear():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::containsEntry(java.lang.Object, java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::containsKey(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::containsValue(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::entries():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::get(K):java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::keys():com.google.common.collect.Multiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::keySet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::put(K, V):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::putAll(K, java.lang.Iterable):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::putAll(com.google.common.collect.Multimap):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::remove(java.lang.Object, java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::removeAll(java.lang.Object):java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::replaceValues(K, java.lang.Iterable):java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::values():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultimap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::count(java.lang.Object):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::add(E, int):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::remove(java.lang.Object, int):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::elementSet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::entrySet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::setCount(E, int):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::setCount(E, int, int):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingMultiset::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingNavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::lowerEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::lowerKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::floorEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::floorKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::ceilingEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::ceilingKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::higherEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::higherKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::firstEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::lastEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::pollFirstEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::pollLastEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::descendingMap():java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::navigableKeySet():java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::descendingKeySet():java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::subMap(K, boolean, K, boolean):java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::headMap(K, boolean):java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::tailMap(K, boolean):java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::delegate():java.util.SortedMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::delegate():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableMap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingNavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::lower(E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::floor(E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::ceiling(E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::higher(E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::pollFirst():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::pollLast():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::descendingSet():java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::descendingIterator():java.util.Iterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::subSet(E, boolean, E, boolean):java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::headSet(E, boolean):java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::tailSet(E, boolean):java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::delegate():java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::delegate():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingNavigableSet::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingObject" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingObject::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingQueue" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::offer(E):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::poll():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::remove():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::peek():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::element():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingQueue::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSet::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSet::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSet::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSet::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingSetMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSetMultimap::entries():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSetMultimap::get(K):java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSetMultimap::removeAll(java.lang.Object):java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSetMultimap::replaceValues(K, java.lang.Iterable):java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSetMultimap::delegate():com.google.common.collect.Multimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSetMultimap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingSortedMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::comparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::firstKey():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::headMap(K):java.util.SortedMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::lastKey():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::subMap(K, K):java.util.SortedMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::tailMap(K):java.util.SortedMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::delegate():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingSortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::comparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::descendingMultiset():com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::firstEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::lastEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::pollFirstEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::pollLastEntry():com.google.common.collect.Multiset$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::headMultiset(E, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::tailMultiset(E, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::delegate():com.google.common.collect.Multiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedMultiset::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::comparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::first():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::headSet(E):java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::last():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::subSet(E, E):java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::tailSet(E):java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::delegate():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSet::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingSortedSetMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::get(K):java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::removeAll(java.lang.Object):java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::replaceValues(K, java.lang.Iterable):java.util.SortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::valueComparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::delegate():com.google.common.collect.SetMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::delegate():com.google.common.collect.Multimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingSortedSetMultimap::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ForwardingTable" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::cellSet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::clear():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::column(C):java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::columnKeySet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::columnMap():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::contains(java.lang.Object, java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::containsColumn(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::containsRow(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::containsValue(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::get(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::put(R, C, V):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::putAll(com.google.common.collect.Table):void" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::remove(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::row(R):java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::rowKeySet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::rowMap():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::values():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ForwardingTable::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.HashBiMap$Itr" />
			<role name="TemplateMethod()" element="com.google.common.collect.HashBiMap$Itr::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableAsList" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableAsList::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableAsList::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableAsList::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableAsList::isPartialView():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableAsList::writeReplace():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableBiMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableBiMap::values():com.google.common.collect.ImmutableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableBiMap::inverse():com.google.common.collect.BiMap" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableCollection$Builder" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableCollection$Builder::add(E[]):com.google.common.collect.ImmutableCollection$Builder" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableCollection$Builder::addAll(java.lang.Iterable):com.google.common.collect.ImmutableCollection$Builder" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableCollection$Builder::addAll(java.util.Iterator):com.google.common.collect.ImmutableCollection$Builder" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableCollection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableCollection::createAsList():com.google.common.collect.ImmutableList" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableCollection::iterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMap::copyOf():com.google.common.collect.ImmutableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMap::containsKey(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMap::entrySet():com.google.common.collect.ImmutableSet" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableMapEntrySet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMapEntrySet::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMapEntrySet::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMapEntrySet::isPartialView():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMapEntrySet::isHashCodeFast():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMapEntrySet::hashCode():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMapEntrySet::writeReplace():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableMultimap$Itr" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMultimap$Itr::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableMultimap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableMultimap::get(java.lang.Object):java.util.Collection" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSet::iterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableSortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::comparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType):com.google.common.collect.ImmutableSortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::elementSet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::tailMultiset(java.lang.Object, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::headMultiset(java.lang.Object, com.google.common.collect.BoundType):com.google.common.collect.SortedMultiset" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::elementSet():java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedMultiset::elementSet():java.util.SortedSet" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::headSet(E, boolean):com.google.common.collect.ImmutableSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::subSet(E, boolean, E, boolean):com.google.common.collect.ImmutableSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::tailSet(E, boolean):com.google.common.collect.ImmutableSortedSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::lower(E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::floor(E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::first():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::last():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::iterator():java.util.Iterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableSortedSet::descendingIterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.ImmutableTable" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::column(C):com.google.common.collect.ImmutableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::columnKeySet():com.google.common.collect.ImmutableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::row(R):com.google.common.collect.ImmutableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::rowKeySet():com.google.common.collect.ImmutableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::createValues():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::createCellSet():java.util.Set" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::columnMap():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.ImmutableTable::rowMap():java.util.Map" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Maps$DescendingMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::delegate():java.util.Map" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::comparator():java.util.Comparator" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::firstKey():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::lastKey():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::lowerEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::lowerKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::floorEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::floorKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::ceilingEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::ceilingKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::higherEntry(K):java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::higherKey(K):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::firstEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::lastEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::pollFirstEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::pollLastEntry():java.util.Map$Entry" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::descendingMap():java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::descendingKeySet():java.util.NavigableSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::subMap(K, boolean, K, boolean):java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::headMap(K, boolean):java.util.NavigableMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$DescendingMap::tailMap(K, boolean):java.util.NavigableMap" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Maps$EntrySet" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$EntrySet::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$EntrySet::clear():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$EntrySet::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$EntrySet::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$EntrySet::remove(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$EntrySet::retainAll(java.util.Collection):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Maps$IteratorBasedAbstractMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$IteratorBasedAbstractMap::clear():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Maps$ViewCachingAbstractMap" />
			<role name="TemplateMethod()" element="com.google.common.collect.Maps$ViewCachingAbstractMap::entrySet():java.util.Set" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Multimaps$Entries" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multimaps$Entries::size():int" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multimaps$Entries::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multimaps$Entries::remove(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multimaps$Entries::clear():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Multisets$ElementSet" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::clear():void" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::containsAll(java.util.Collection):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::iterator():java.util.Iterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::remove(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$ElementSet::size():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Multisets$EntrySet" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$EntrySet::contains(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$EntrySet::remove(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Multisets$EntrySet::clear():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.Ordering" />
			<role name="TemplateMethod()" element="com.google.common.collect.Ordering::min(, E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Ordering::max(, E):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.collect.Ordering::leastOf(, int):java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.collect.Ordering::partition(, int, int, int):int" />
			<role name="TemplateMethod()" element="com.google.common.collect.Ordering::isOrdered(java.lang.Iterable):boolean" />
			<role name="TemplateMethod()" element="com.google.common.collect.Ordering::isStrictlyOrdered(java.lang.Iterable):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.collect.TransformedIterator" />
			<role name="TemplateMethod()" element="com.google.common.collect.TransformedIterator::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.escape.ArrayBasedCharEscaper" />
			<role name="TemplateMethod()" element="com.google.common.escape.ArrayBasedCharEscaper::escape(char):char[]" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.escape.ArrayBasedUnicodeEscaper" />
			<role name="TemplateMethod()" element="com.google.common.escape.ArrayBasedUnicodeEscaper::escape(int):char[]" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.escape.CharEscaper" />
			<role name="TemplateMethod()" element="com.google.common.escape.CharEscaper::escape(java.lang.String):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.escape.CharEscaper::escapeSlow(java.lang.String, int):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.escape.UnicodeEscaper" />
			<role name="TemplateMethod()" element="com.google.common.escape.UnicodeEscaper::nextEscapeIndex(java.lang.CharSequence, int, int):int" />
			<role name="TemplateMethod()" element="com.google.common.escape.UnicodeEscaper::escapeSlow(java.lang.String, int):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.hash.AbstractByteHasher" />
			<role name="TemplateMethod()" element="com.google.common.hash.AbstractByteHasher::update(byte[], int, int):void" />
			<role name="TemplateMethod()" element="com.google.common.hash.AbstractByteHasher::putByte(byte):com.google.common.hash.Hasher" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher" />
			<role name="TemplateMethod()" element="com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher::processRemaining(java.nio.ByteBuffer):void" />
			<role name="TemplateMethod()" element="com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher::putBytes(java.nio.ByteBuffer):com.google.common.hash.Hasher" />
			<role name="TemplateMethod()" element="com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher::hash():com.google.common.hash.HashCode" />
			<role name="TemplateMethod()" element="com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher::munch():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.hash.HashCode" />
			<role name="TemplateMethod()" element="com.google.common.hash.HashCode::writeBytesTo(byte[], int, int):int" />
			<role name="TemplateMethod()" element="com.google.common.hash.HashCode::getBytesInternal():byte[]" />
			<role name="TemplateMethod()" element="com.google.common.hash.HashCode::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.google.common.hash.HashCode::hashCode():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.hash.Hashing$ChecksumType" />
			<role name="TemplateMethod()" element="com.google.common.hash.Hashing$ChecksumType::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.io.BaseEncoding" />
			<role name="TemplateMethod()" element="com.google.common.io.BaseEncoding::encode(byte[], int, int):java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.io.BaseEncoding::decodeChecked(java.lang.CharSequence):byte[]" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.io.ByteSink" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSink::openBufferedStream():java.io.OutputStream" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSink::write(byte[]):void" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSink::writeFrom(java.io.InputStream):long" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.io.ByteSource" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::openBufferedStream():java.io.InputStream" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::isEmpty():boolean" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::size():long" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::copyTo(java.io.OutputStream):long" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::copyTo(com.google.common.io.ByteSink):long" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::read():byte[]" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::read():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.io.ByteSource::contentEquals(com.google.common.io.ByteSource):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.io.CharSink" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSink::openBufferedStream():java.io.Writer" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSink::write(java.lang.CharSequence):void" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSink::writeFrom(java.lang.Readable):long" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.io.CharSource" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::openBufferedStream():java.io.BufferedReader" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::length():long" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::copyTo(java.lang.Appendable):long" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::copyTo(com.google.common.io.CharSink):long" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::read():java.lang.String" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::readLines():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.io.CharSource::isEmpty():boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.io.LineBuffer" />
			<role name="TemplateMethod()" element="com.google.common.io.LineBuffer::finishLine(boolean):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.math.LongMath$MillerRabinTester" />
			<role name="TemplateMethod()" element="com.google.common.math.LongMath$MillerRabinTester::powMod(long, long, long):long" />
			<role name="TemplateMethod()" element="com.google.common.math.LongMath$MillerRabinTester::testWitness(long, long):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.reflect.AbstractInvocationHandler" />
			<role name="TemplateMethod()" element="com.google.common.reflect.AbstractInvocationHandler::invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.reflect.ClassPath$Scanner" />
			<role name="TemplateMethod()" element="com.google.common.reflect.ClassPath$Scanner::scanFrom(java.io.File, java.lang.ClassLoader):void" />
			<role name="TemplateMethod()" element="com.google.common.reflect.ClassPath$Scanner::scanJar(java.io.File, java.lang.ClassLoader):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.reflect.Invokable" />
			<role name="TemplateMethod()" element="com.google.common.reflect.Invokable::invoke(T, java.lang.Object[]):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.reflect.Invokable::getReturnType():com.google.common.reflect.TypeToken" />
			<role name="TemplateMethod()" element="com.google.common.reflect.Invokable::getParameters():com.google.common.collect.ImmutableList" />
			<role name="TemplateMethod()" element="com.google.common.reflect.Invokable::getExceptionTypes():com.google.common.collect.ImmutableList" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.reflect.Types$ClassOwnership" />
			<role name="TemplateMethod()" element="com.google.common.reflect.Types$ClassOwnership::detectJvmBehavior():com.google.common.reflect.Types$ClassOwnership" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.reflect.Types$JavaVersion" />
			<role name="TemplateMethod()" element="com.google.common.reflect.Types$JavaVersion::usedInGenericType(java.lang.reflect.Type[]):com.google.common.collect.ImmutableList" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.reflect.TypeToken$TypeCollector" />
			<role name="TemplateMethod()" element="com.google.common.reflect.TypeToken$TypeCollector::collectTypes(K, java.util.Map):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.AbstractCheckedFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AbstractCheckedFuture::checkedGet():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AbstractCheckedFuture::checkedGet(long, java.util.concurrent.TimeUnit):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.AbstractService" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AbstractService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AbstractService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AbstractService::notifyStarted():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.AggregateFuture$RunningState" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AggregateFuture$RunningState::init():void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AggregateFuture$RunningState::processCompleted():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.AggregateFutureState" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.AggregateFutureState::getOrInitSeenExceptions():java.util.Set" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState::handleAllCompleted():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.ForwardingBlockingQueue" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::drainTo(java.util.Collection, int):int" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::drainTo(java.util.Collection):int" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::offer(E, long, java.util.concurrent.TimeUnit):boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::poll(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::put(E):void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::remainingCapacity():int" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::take():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::delegate():java.util.Queue" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::delegate():java.util.Collection" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingBlockingQueue::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.ForwardingCheckedFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingCheckedFuture::checkedGet():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingCheckedFuture::checkedGet(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingCheckedFuture::delegate():com.google.common.util.concurrent.ListenableFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingCheckedFuture::delegate():java.util.concurrent.Future" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingCheckedFuture::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.ForwardingExecutorService" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::awaitTermination(long, java.util.concurrent.TimeUnit):boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::invokeAll():java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::invokeAll(, long, java.util.concurrent.TimeUnit):java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::invokeAny():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::invokeAny(, long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::isShutdown():boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::isTerminated():boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::shutdown():void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::shutdownNow():java.util.List" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::execute(java.lang.Runnable):void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::submit():java.util.concurrent.Future" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::submit(java.lang.Runnable):java.util.concurrent.Future" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::submit(, T):java.util.concurrent.Future" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingExecutorService::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.ForwardingFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingFuture::cancel(boolean):boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingFuture::isCancelled():boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingFuture::isDone():boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingFuture::get():java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingFuture::get(long, java.util.concurrent.TimeUnit):java.lang.Object" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingFuture::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.ForwardingListenableFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListenableFuture::addListener(java.lang.Runnable, java.util.concurrent.Executor):void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListenableFuture::delegate():java.util.concurrent.Future" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListenableFuture::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.ForwardingListeningExecutorService" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListeningExecutorService::submit():com.google.common.util.concurrent.ListenableFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListeningExecutorService::submit(java.lang.Runnable):com.google.common.util.concurrent.ListenableFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListeningExecutorService::submit(, T):com.google.common.util.concurrent.ListenableFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListeningExecutorService::delegate():java.util.concurrent.ExecutorService" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.ForwardingListeningExecutorService::delegate():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.Futures$AbstractCatchingFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.Futures$AbstractCatchingFuture::run():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.Futures$AbstractChainingFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.Futures$AbstractChainingFuture::run():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.Futures$ImmediateFuture" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.Futures$ImmediateFuture::get(long, java.util.concurrent.TimeUnit):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.InterruptibleTask" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.InterruptibleTask::run():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.RateLimiter" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.RateLimiter::setRate(double):void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.RateLimiter::getRate():double" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.RateLimiter::canAcquire(long, long):boolean" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.RateLimiter::reserveAndGetWaitLength(int, long):long" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.SmoothRateLimiter" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.SmoothRateLimiter::doSetRate(double, long):void" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.SmoothRateLimiter::reserveEarliestAvailable(int, long):long" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.SmoothRateLimiter::resync(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.google.common.util.concurrent.Striped" />
			<role name="TemplateMethod()" element="com.google.common.util.concurrent.Striped::bulkGet(java.lang.Iterable):java.lang.Iterable" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy">
		<instance>
			<role name="RealSubject" element="com.google.common.collect.ImmutableList" />
			<role name="Proxy" element="com.google.common.collect.RegularImmutableSortedSet" />
			<role name="Request()" element="com.google.common.collect.RegularImmutableSortedSet::iterator():com.google.common.collect.UnmodifiableIterator" />
		</instance>
		<instance>
			<role name="RealSubject" element="com.google.common.collect.ImmutableSet" />
			<role name="Proxy" element="com.google.common.collect.ImmutableMultiset" />
			<role name="Request()" element="com.google.common.collect.ImmutableMultiset::iterator():com.google.common.collect.UnmodifiableIterator" />
		</instance>
		<instance>
			<role name="Proxy" element="com.google.common.collect.TreeMultiset$1" />
			<role name="RealSubject" element="com.google.common.collect.TreeMultiset$AvlNode" />
			<role name="Request()" element="com.google.common.collect.TreeMultiset$1::getElement():java.lang.Object" />
			<role name="Request()" element="com.google.common.collect.TreeMultiset$1::getCount():int" />
		</instance>
		<instance>
			<role name="Proxy" element="com.google.common.collect.TreeRangeMap$SubRangeMap" />
			<role name="RealSubject" element="com.google.common.collect.TreeRangeMap" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::putAll(com.google.common.collect.RangeMap):void" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::remove(com.google.common.collect.Range):void" />
			<role name="Request()" element="com.google.common.collect.TreeRangeMap$SubRangeMap::subRangeMap(com.google.common.collect.Range):com.google.common.collect.RangeMap" />
		</instance>
		<instance>
			<role name="Proxy" element="com.google.common.util.concurrent.AbstractScheduledService" />
			<role name="RealSubject" element="com.google.common.util.concurrent.AbstractService" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::isRunning():boolean" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::state():com.google.common.util.concurrent.Service$State" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::failureCause():java.lang.Throwable" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::awaitRunning():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::awaitRunning(long, java.util.concurrent.TimeUnit):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::awaitTerminated():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractScheduledService::awaitTerminated(long, java.util.concurrent.TimeUnit):void" />
		</instance>
	</pattern>
	<pattern name="Proxy2">
		<instance>
			<role name="Proxy" element="com.google.common.util.concurrent.AbstractExecutionThreadService" />
			<role name="RealSubject" element="com.google.common.util.concurrent.AbstractExecutionThreadService$1" />
			<role name="Subject" element="com.google.common.util.concurrent.Service" />
			<role name="subject" element="com.google.common.util.concurrent.AbstractExecutionThreadService::delegate:com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::isRunning():boolean" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::state():com.google.common.util.concurrent.Service$State" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::failureCause():java.lang.Throwable" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitRunning():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitRunning(long, java.util.concurrent.TimeUnit):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitTerminated():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractExecutionThreadService::awaitTerminated(long, java.util.concurrent.TimeUnit):void" />
		</instance>
		<instance>
			<role name="Proxy" element="com.google.common.util.concurrent.AbstractIdleService" />
			<role name="RealSubject" element="com.google.common.util.concurrent.AbstractIdleService$DelegateService" />
			<role name="Subject" element="com.google.common.util.concurrent.Service" />
			<role name="subject" element="com.google.common.util.concurrent.AbstractIdleService::delegate:com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::isRunning():boolean" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::state():com.google.common.util.concurrent.Service$State" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::failureCause():java.lang.Throwable" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::startAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::stopAsync():com.google.common.util.concurrent.Service" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::awaitRunning():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::awaitRunning(long, java.util.concurrent.TimeUnit):void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::awaitTerminated():void" />
			<role name="Request()" element="com.google.common.util.concurrent.AbstractIdleService::awaitTerminated(long, java.util.concurrent.TimeUnit):void" />
		</instance>
	</pattern>
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="com.google.common.base.Converter" />
			<role name="successor" element="com.google.common.base.Converter::reverse:com.google.common.base.Converter" />
		</instance>
		<instance>
			<role name="Handler" element="com.google.common.collect.AbstractBiMap" />
			<role name="successor" element="com.google.common.collect.AbstractBiMap::inverse:com.google.common.collect.AbstractBiMap" />
		</instance>
		<instance>
			<role name="Handler" element="com.google.common.collect.ImmutableSortedMultiset" />
			<role name="successor" element="com.google.common.collect.ImmutableSortedMultiset::descendingMultiset:com.google.common.collect.ImmutableSortedMultiset" />
		</instance>
		<instance>
			<role name="Handler" element="com.google.common.collect.ImmutableSortedSet" />
			<role name="successor" element="com.google.common.collect.ImmutableSortedSet::descendingSet:com.google.common.collect.ImmutableSortedSet" />
		</instance>
		<instance>
			<role name="Handler" element="com.google.common.util.concurrent.Monitor$Guard" />
			<role name="successor" element="com.google.common.util.concurrent.Monitor$Guard::next:com.google.common.util.concurrent.Monitor$Guard" />
		</instance>
	</pattern>
</system>

