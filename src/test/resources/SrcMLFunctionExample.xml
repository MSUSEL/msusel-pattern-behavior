<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <function>
        <annotation>@<name>Override</name>
        </annotation>
        <annotation>@<name>nonNull</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>static</specifier>
        <type>
            <name>int</name>
        </type>
        <name>getDataModel</name>
        <parameter_list>()</parameter_list>
        <block>{      <return>return <expr>
            <literal type="number">32</literal>
        </expr>;</return>    }</block>
    </function>
    <function>
        <specifier>public</specifier>
        <specifier>static</specifier>
        <type>
            <name>
                <name>ExpectedCondition</name>
                <argument_list type="generic">&lt;<argument>
                    <name>Boolean</name>
                </argument>&gt;</argument_list>
            </name>
        </type>
        <name>or</name>
        <parameter_list>(<parameter>
            <decl>
                <type>
                    <specifier>final</specifier>
                    <name>
                        <name>ExpectedCondition</name>
                        <argument_list type="generic">&lt;<argument>
                            <name>?</name>
                        </argument>&gt;</argument_list>
                    </name>
                    <modifier>...</modifier>
                </type>
                <name>conditions</name>
            </decl>
        </parameter>)</parameter_list>
        <block>{    <return>return <expr>
            <operator>new</operator>
            <class>
                <super>
                    <name>
                        <name>ExpectedCondition</name>
                        <argument_list type="generic">&lt;<argument>
                            <name>Boolean</name>
                        </argument>&gt;</argument_list>
                    </name>
                </super>
                <argument_list>()</argument_list>
                <block>{      <function>
                    <annotation>@<name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <type>
                        <name>Boolean</name>
                    </type>
                    <name>apply</name>
                    <parameter_list>(<parameter>
                        <decl>
                            <type>
                                <name>WebDriver</name>
                            </type>
                            <name>driver</name>
                        </decl>
                    </parameter>)</parameter_list>
                    <block>{        <decl_stmt>
                        <decl>
                            <type>
                                <name>RuntimeException</name>
                            </type>
                            <name>lastException</name>
                            <init>= <expr>
                                <literal type="null">null</literal>
                            </expr>
                            </init>
                        </decl>;</decl_stmt>
                        <for>for <control>(<init>
                            <decl>
                                <type>
                                    <name>
                                        <name>ExpectedCondition</name>
                                        <argument_list type="generic">&lt;<argument>
                                            <name>?</name>
                                        </argument>&gt;</argument_list>
                                    </name>
                                </type>
                                <name>condition</name>
                                <range>: <expr>
                                    <name>conditions</name>
                                </expr>
                                </range>
                            </decl>
                        </init>)</control>
                            <block>{          <try>try <block>{            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>result</name>
                                    <init>= <expr>
                                        <call>
                                            <name>
                                                <name>condition</name>
                                                <operator>.</operator>
                                                <name>apply</name>
                                            </name>
                                            <argument_list>(<argument>
                                                <expr>
                                                    <name>driver</name>
                                                </expr>
                                            </argument>)</argument_list>
                                        </call>
                                    </expr>
                                    </init>
                                </decl>;</decl_stmt>
                                <if>if <condition>(<expr>
                                    <name>result</name>
                                    <operator>!=</operator>
                                    <literal type="null">null</literal>
                                </expr>)</condition>
                                    <then>
                                        <block>{              <if>if <condition>(<expr>
                                            <name>result</name>
                                            <operator>instanceof</operator>
                                            <name>Boolean</name>
                                        </expr>)</condition>
                                            <then>
                                                <block>{                <if>if <condition>(<expr>
                                                    <call>
                                                        <name>
                                                            <name>Boolean</name>
                                                            <operator>.</operator>
                                                            <name>TRUE</name>
                                                            <operator>.</operator>
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(<argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>)</argument_list>
                                                    </call>
                                                </expr>)</condition>
                                                    <then>
                                                        <block>{                  <return>return <expr>
                                                            <literal type="boolean">true</literal>
                                                        </expr>;</return>                }</block>
                                                    </then>
                                                </if>              }</block>
                                            </then>
                                            <else>else <block>{                <return>return <expr>
                                                <literal type="boolean">true</literal>
                                            </expr>;</return>              }</block>
                                            </else>
                                        </if>            }</block>
                                    </then>
                                </if>          }</block>
                                <catch>catch <parameter_list>(<parameter>
                                    <decl>
                                        <type>
                                            <name>RuntimeException</name>
                                        </type>
                                        <name>e</name>
                                    </decl>
                                </parameter>)</parameter_list>
                                    <block>{            <expr_stmt>
                                        <expr>
                                            <name>lastException</name>
                                            <operator>=</operator>
                                            <name>e</name>
                                        </expr>;</expr_stmt>          }</block>
                                </catch>
                            </try>        }</block>
                        </for>
                        <if>if <condition>(<expr>
                            <name>lastException</name>
                            <operator>!=</operator>
                            <literal type="null">null</literal>
                        </expr>)</condition>
                            <then>
                                <block>{          <throw>throw <expr>
                                    <name>lastException</name>
                                </expr>;</throw>        }</block>
                            </then>
                        </if>
                        <return>return <expr>
                            <literal type="boolean">false</literal>
                        </expr>;</return>      }</block>
                </function>
                    <function>
                        <annotation>@<name>Override</name>
                        </annotation>
                        <specifier>public</specifier>
                        <type>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{        <decl_stmt>
                            <decl>
                                <type>
                                    <name>StringBuilder</name>
                                </type>
                                <name>message</name>
                                <init>= <expr>
                                    <operator>new</operator>
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <literal type="string">"at least one condition to be valid: "</literal>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                </expr>
                                </init>
                            </decl>;</decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>
                                            <name>Joiner</name>
                                            <operator>.</operator>
                                            <name>on</name>
                                        </name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <literal type="string">" || "</literal>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                    <operator>.</operator>
                                    <call>
                                        <name>appendTo</name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <name>message</name>
                                            </expr>
                                        </argument>, <argument>
                                            <expr>
                                                <name>conditions</name>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                </expr>;</expr_stmt>
                            <return>return <expr>
                                <call>
                                    <name>
                                        <name>message</name>
                                        <operator>.</operator>
                                        <name>toString</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>;</return>      }</block>
                    </function>    }</block>
            </class>
        </expr>;</return>  }</block>
    </function>
</root>