<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>AbstractAnnotations</name>
        <block>{  <comment type="block" format="javadoc">/**   * Defines how to transform given object (field, class, etc)   * into {@link org.openqa.selenium.By} class used by webdriver to locate elements.   *   * @return By object   */</comment>
            <function_decl>
                <specifier>public</specifier>
                <specifier>abstract</specifier>
                <type>
                    <name>By</name>
                </type>
                <name>buildBy</name>
                <parameter_list>()</parameter_list>;</function_decl>
            <comment type="block" format="javadoc">/**   * Defines whether or not given element   * should be returned from cache on further calls.   *   * @return boolean if lookup cached   */</comment>
            <function_decl>
                <specifier>public</specifier>
                <specifier>abstract</specifier>
                <type>
                    <name>boolean</name>
                </type>
                <name>isLookupCached</name>
                <parameter_list>()</parameter_list>;</function_decl>}</block>
    </class>
    <class>
        <specifier>public</specifier> class <name>InternetExplorerDriver</name>
        <super>
            <extends>extends <name>RemoteWebDriver</name>
            </extends>
        </super>
        <block>{  <comment type="block" format="javadoc">/**   * Capability that defines whether to ignore the browser zoom level or not.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>IGNORE_ZOOM_SETTING</name>
                    <init>= <expr>
                        <literal type="string">"ignoreZoomSetting"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines to use whether to use native or javascript events during operations.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>NATIVE_EVENTS</name>
                    <init>= <expr>
                        <name>
                            <name>CapabilityType</name>
                            <operator>.</operator>
                            <name>HAS_NATIVE_EVENTS</name>
                        </name>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines the initial URL to be used when IE is launched.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>INITIAL_BROWSER_URL</name>
                    <init>= <expr>
                        <literal type="string">"initialBrowserUrl"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines how elements are scrolled into view in the InternetExplorerDriver.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ELEMENT_SCROLL_BEHAVIOR</name>
                    <init>= <expr>
                        <name>
                            <name>CapabilityType</name>
                            <operator>.</operator>
                            <name>ELEMENT_SCROLL_BEHAVIOR</name>
                        </name>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines which behaviour will be used if an unexpected Alert is found.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>UNEXPECTED_ALERT_BEHAVIOR</name>
                    <init>= <expr>
                        <name>
                            <name>CapabilityType</name>
                            <operator>.</operator>
                            <name>UNEXPECTED_ALERT_BEHAVIOUR</name>
                        </name>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines to use or not cleanup of element cache on document loading.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ENABLE_ELEMENT_CACHE_CLEANUP</name>
                    <init>= <expr>
                        <literal type="string">"enableElementCacheCleanup"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines timeout in milliseconds for attaching to new browser window.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>BROWSER_ATTACH_TIMEOUT</name>
                    <init>= <expr>
                        <literal type="string">"browserAttachTimeout"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines to ignore ot not browser   * protected mode settings during starting by IEDriverServer.   *   * Setting this capability will make your tests unstable and hard to debug.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS</name>
                    <init>=      <expr>
                        <literal type="string">"ignoreProtectedModeSettings"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines to use persistent hovering or not.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ENABLE_PERSISTENT_HOVERING</name>
                    <init>= <expr>
                        <literal type="string">"enablePersistentHover"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines to focus to browser window or not before operation.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>REQUIRE_WINDOW_FOCUS</name>
                    <init>= <expr>
                        <literal type="string">"requireWindowFocus"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines the location of the file where IEDriverServer   * should write log messages to.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>LOG_FILE</name>
                    <init>= <expr>
                        <literal type="string">"logFile"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines the detalization level the IEDriverServer logs.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>LOG_LEVEL</name>
                    <init>= <expr>
                        <literal type="string">"logLevel"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines the address of the host adapter on which   * the IEDriverServer will listen for commands.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>HOST</name>
                    <init>= <expr>
                        <literal type="string">"host"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines full path to directory to which will be   * extracted supporting files of the IEDriverServer.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>EXTRACT_PATH</name>
                    <init>= <expr>
                        <literal type="string">"extractPath"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines suppress or not diagnostic output of the IEDriverServer.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>SILENT</name>
                    <init>= <expr>
                        <literal type="string">"silent"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines launch API of IE used by IEDriverServer.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>FORCE_CREATE_PROCESS</name>
                    <init>= <expr>
                        <literal type="string">"ie.forceCreateProcessApi"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines to clean or not browser cache before launching IE by IEDriverServer.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>IE_ENSURE_CLEAN_SESSION</name>
                    <init>= <expr>
                        <literal type="string">"ie.ensureCleanSession"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines setting the proxy information for a single IE process   * without affecting the proxy settings of other instances of IE.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>IE_USE_PER_PROCESS_PROXY</name>
                    <init>= <expr>
                        <literal type="string">"ie.usePerProcessProxy"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * @deprecated Use {@link #IE_USE_PER_PROCESS_PROXY} (the one without the typo);   */</comment>
            <decl_stmt>
                <decl>
                    <annotation>@<name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>IE_USE_PRE_PROCESS_PROXY</name>
                    <init>= <expr>
                        <name>IE_USE_PER_PROCESS_PROXY</name>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Capability that defines used IE CLI switches when {@link #FORCE_CREATE_PROCESS} is enabled.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>public</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>IE_SWITCHES</name>
                    <init>= <expr>
                        <literal type="string">"ie.browserCommandLineSwitches"</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**   * Port which is used by default.   */</comment>
            <decl_stmt>
                <decl>
                    <specifier>private</specifier>
                    <type>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>DEFAULT_PORT</name>
                    <init>= <expr>
                        <literal type="number">0</literal>
                    </expr>
                    </init>
                </decl>;</decl_stmt>
            <constructor>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>()</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>DEFAULT_PORT</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <comment type="block" format="javadoc">/**   * @deprecated Use {@link InternetExplorerDriver(InternetExplorerOptions)}   */</comment>
            <constructor>
                <annotation>@<name>Deprecated</name>
                </annotation>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>Capabilities</name>
                        </type>
                        <name>capabilities</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>capabilities</name>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>DEFAULT_PORT</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <constructor>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerOptions</name>
                        </type>
                        <name>options</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>options</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <comment type="block" format="javadoc">/**   * @deprecated Create an {@link InternetExplorerDriverService} and then use that to create a   *   {@link RemoteWebDriver#RemoteWebDriver(org.openqa.selenium.remote.CommandExecutor, Capabilities)} with a   *   {@link DriverCommandExecutor}.   */</comment>
            <constructor>
                <annotation>@<name>Deprecated</name>
                </annotation>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>port</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>port</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <constructor>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerDriverService</name>
                        </type>
                        <name>service</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <name>service</name>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <literal type="null">null</literal>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>DEFAULT_PORT</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <comment type="block" format="javadoc">/**   * @deprecated Use {@link InternetExplorerDriver(InternetExplorerDriverService, InternetExplorerOptions)}   */</comment>
            <constructor>
                <annotation>@<name>Deprecated</name>
                </annotation>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerDriverService</name>
                        </type>
                        <name>service</name>
                    </decl>
                </parameter>, <parameter>
                    <decl>
                        <type>
                            <name>Capabilities</name>
                        </type>
                        <name>capabilities</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <name>service</name>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>capabilities</name>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>DEFAULT_PORT</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <constructor>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(      <parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerDriverService</name>
                        </type>
                        <name>service</name>
                    </decl>
                </parameter>,      <parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerOptions</name>
                        </type>
                        <name>options</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>this</name>
                            <argument_list>(<argument>
                                <expr>
                                    <name>service</name>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>options</name>
                                </expr>
                            </argument>, <argument>
                                <expr>
                                    <name>DEFAULT_PORT</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</expr_stmt>  }</block>
            </constructor>
            <comment type="block" format="javadoc">/**   * @deprecated Create an {@link InternetExplorerDriverService} and then use that to create a   *   {@link RemoteWebDriver#RemoteWebDriver(org.openqa.selenium.remote.CommandExecutor, Capabilities)} with a   *   {@link DriverCommandExecutor}.   */</comment>
            <constructor>
                <annotation>@<name>Deprecated</name>
                </annotation>
                <specifier>public</specifier>
                <name>InternetExplorerDriver</name>
                <parameter_list>(      <parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerDriverService</name>
                        </type>
                        <name>service</name>
                    </decl>
                </parameter>,      <parameter>
                    <decl>
                        <type>
                            <name>Capabilities</name>
                        </type>
                        <name>capabilities</name>
                    </decl>
                </parameter>,      <parameter>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>port</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <if>if <condition>(<expr>
                    <name>capabilities</name>
                    <operator>==</operator>
                    <literal type="null">null</literal>
                </expr>)</condition>
                    <then>
                        <block>{      <expr_stmt>
                            <expr>
                                <name>capabilities</name>
                                <operator>=</operator>
                                <call>
                                    <name>
                                        <name>DesiredCapabilities</name>
                                        <operator>.</operator>
                                        <name>internetExplorer</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>;</expr_stmt>    }</block>
                    </then>
                </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>
                                    <name>Preconditions</name>
                                    <operator>.</operator>
                                    <name>checkNotNull</name>
                                </name>
                                <argument_list>(<argument>
                                    <expr>
                                        <name>capabilities</name>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>capabilities</name>
                            <operator>=</operator>
                            <operator>new</operator>
                            <call>
                                <name>InternetExplorerOptions</name>
                                <argument_list>(<argument>
                                    <expr>
                                        <name>capabilities</name>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</expr_stmt>
                    <if>if <condition>(<expr>
                        <name>service</name>
                        <operator>==</operator>
                        <literal type="null">null</literal>
                    </expr>)</condition>
                        <then>
                            <block>{      <expr_stmt>
                                <expr>
                                    <name>service</name>
                                    <operator>=</operator>
                                    <call>
                                        <name>setupService</name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <name>capabilities</name>
                                            </expr>
                                        </argument>, <argument>
                                            <expr>
                                                <name>port</name>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                </expr>;</expr_stmt>    }</block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>run</name>
                                <argument_list>(<argument>
                                    <expr>
                                        <name>service</name>
                                    </expr>
                                </argument>, <argument>
                                    <expr>
                                        <name>capabilities</name>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</expr_stmt>  }</block>
            </constructor>
            <function>
                <specifier>private</specifier>
                <type>
                    <name>void</name>
                </type>
                <name>run</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>InternetExplorerDriverService</name>
                        </type>
                        <name>service</name>
                    </decl>
                </parameter>, <parameter>
                    <decl>
                        <type>
                            <name>Capabilities</name>
                        </type>
                        <name>capabilities</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <expr_stmt>
                    <expr>
                        <call>
                            <name>assertOnWindows</name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>;</expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setCommandExecutor</name>
                                <argument_list>(<argument>
                                    <expr>
                                        <operator>new</operator>
                                        <call>
                                            <name>DriverCommandExecutor</name>
                                            <argument_list>(<argument>
                                                <expr>
                                                    <name>service</name>
                                                </expr>
                                            </argument>)</argument_list>
                                        </call>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>startSession</name>
                                <argument_list>(<argument>
                                    <expr>
                                        <name>capabilities</name>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</expr_stmt>  }</block>
            </function>
            <function>
                <annotation>@<name>Override</name>
                </annotation>
                <specifier>public</specifier>
                <type>
                    <name>void</name>
                </type>
                <name>setFileDetector</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>FileDetector</name>
                        </type>
                        <name>detector</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <throw>throw <expr>
                    <operator>new</operator>
                    <call>
                        <name>WebDriverException</name>
                        <argument_list>(        <argument>
                            <expr>
                                <literal type="string">"Setting the file detector only works on remote webdriver instances obtained "</literal>
                                <operator>+</operator>
                                <literal type="string">"via RemoteWebDriver"</literal>
                            </expr>
                        </argument>)</argument_list>
                    </call>
                </expr>;</throw>  }</block>
            </function>
            <function>
                <specifier>public</specifier>
                <parameter_list type="generic">&lt;<parameter>
                    <name>X</name>
                </parameter>&gt;</parameter_list>
                <type>
                    <name>X</name>
                </type>
                <name>getScreenshotAs</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>
                                <name>OutputType</name>
                                <argument_list type="generic">&lt;<argument>
                                    <name>X</name>
                                </argument>&gt;</argument_list>
                            </name>
                        </type>
                        <name>target</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <comment type="line">// Get the screenshot as base64.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>base64</name>
                            <init>= <expr>
                                <call>
                                    <name>execute</name>
                                    <argument_list>(<argument>
                                        <expr>
                                            <name>
                                                <name>DriverCommand</name>
                                                <operator>.</operator>
                                                <name>SCREENSHOT</name>
                                            </name>
                                        </expr>
                                    </argument>)</argument_list>
                                </call>
                                <operator>.</operator>
                                <call>
                                    <name>getValue</name>
                                    <argument_list>()</argument_list>
                                </call>
                                <operator>.</operator>
                                <call>
                                    <name>toString</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            </init>
                        </decl>;</decl_stmt>
                    <comment type="line">// ... and convert it.</comment>
                    <return>return <expr>
                        <call>
                            <name>
                                <name>target</name>
                                <operator>.</operator>
                                <name>convertFromBase64Png</name>
                            </name>
                            <argument_list>(<argument>
                                <expr>
                                    <name>base64</name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>;</return>  }</block>
            </function>
            <function>
                <specifier>protected</specifier>
                <type>
                    <name>void</name>
                </type>
                <name>assertOnWindows</name>
                <parameter_list>()</parameter_list>
                <block>{    <decl_stmt>
                    <decl>
                        <type>
                            <name>Platform</name>
                        </type>
                        <name>current</name>
                        <init>= <expr>
                            <call>
                                <name>
                                    <name>Platform</name>
                                    <operator>.</operator>
                                    <name>getCurrent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        </init>
                    </decl>;</decl_stmt>
                    <if>if <condition>(<expr>
                        <operator>!</operator>
                        <call>
                            <name>
                                <name>current</name>
                                <operator>.</operator>
                                <name>is</name>
                            </name>
                            <argument_list>(<argument>
                                <expr>
                                    <name>
                                        <name>Platform</name>
                                        <operator>.</operator>
                                        <name>WINDOWS</name>
                                    </name>
                                </expr>
                            </argument>)</argument_list>
                        </call>
                    </expr>)</condition>
                        <then>
                            <block>{      <throw>throw <expr>
                                <operator>new</operator>
                                <call>
                                    <name>WebDriverException</name>
                                    <argument_list>(          <argument>
                                        <expr>
                                            <call>
                                                <name>
                                                    <name>String</name>
                                                    <operator>.</operator>
                                                    <name>format</name>
                                                </name>
                                                <argument_list>(              <argument>
                                                    <expr>
                                                        <literal type="string">"You appear to be running %s. The IE driver only runs on Windows."</literal>
                                                    </expr>
                                                </argument>, <argument>
                                                    <expr>
                                                        <name>current</name>
                                                    </expr>
                                                </argument>)</argument_list>
                                            </call>
                                        </expr>
                                    </argument>)</argument_list>
                                </call>
                            </expr>;</throw>    }</block>
                        </then>
                    </if>  }</block>
            </function>
            <function>
                <specifier>private</specifier>
                <type>
                    <name>InternetExplorerDriverService</name>
                </type>
                <name>setupService</name>
                <parameter_list>(<parameter>
                    <decl>
                        <type>
                            <name>Capabilities</name>
                        </type>
                        <name>caps</name>
                    </decl>
                </parameter>, <parameter>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>port</name>
                    </decl>
                </parameter>)</parameter_list>
                <block>{    <decl_stmt>
                    <decl>
                        <type>
                            <name>
                                <name>InternetExplorerDriverService</name>
                                <operator>.</operator>
                                <name>Builder</name>
                            </name>
                        </type>
                        <name>builder</name>
                        <init>= <expr>
                            <operator>new</operator>
                            <call>
                                <name>
                                    <name>InternetExplorerDriverService</name>
                                    <operator>.</operator>
                                    <name>Builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        </init>
                    </decl>;</decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>
                                    <name>builder</name>
                                    <operator>.</operator>
                                    <name>usingPort</name>
                                </name>
                                <argument_list>(<argument>
                                    <expr>
                                        <name>port</name>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</expr_stmt>
                    <if>if <condition>(<expr>
                        <name>caps</name>
                        <operator>!=</operator>
                        <literal type="null">null</literal>
                    </expr>)</condition>
                        <then>
                            <block>{      <if>if <condition>(<expr>
                                <call>
                                    <name>
                                        <name>caps</name>
                                        <operator>.</operator>
                                        <name>getCapability</name>
                                    </name>
                                    <argument_list>(<argument>
                                        <expr>
                                            <name>LOG_FILE</name>
                                        </expr>
                                    </argument>)</argument_list>
                                </call>
                                <operator>!=</operator>
                                <literal type="null">null</literal>
                            </expr>)</condition>
                                <then>
                                    <block>{        <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>value</name>
                                            <init>= <expr>
                                                <operator>(</operator>
                                                <name>String</name>
                                                <operator>)</operator>
                                                <call>
                                                    <name>
                                                        <name>caps</name>
                                                        <operator>.</operator>
                                                        <name>getCapability</name>
                                                    </name>
                                                    <argument_list>(<argument>
                                                        <expr>
                                                            <name>LOG_FILE</name>
                                                        </expr>
                                                    </argument>)</argument_list>
                                                </call>
                                            </expr>
                                            </init>
                                        </decl>;</decl_stmt>
                                        <if>if <condition>(<expr>
                                            <name>value</name>
                                            <operator>!=</operator>
                                            <literal type="null">null</literal>
                                        </expr>)</condition>
                                            <then>
                                                <block>{          <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>
                                                                <name>builder</name>
                                                                <operator>.</operator>
                                                                <name>withLogFile</name>
                                                            </name>
                                                            <argument_list>(<argument>
                                                                <expr>
                                                                    <operator>new</operator>
                                                                    <call>
                                                                        <name>File</name>
                                                                        <argument_list>(<argument>
                                                                            <expr>
                                                                                <name>value</name>
                                                                            </expr>
                                                                        </argument>)</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>)</argument_list>
                                                        </call>
                                                    </expr>;</expr_stmt>        }</block>
                                            </then>
                                        </if>      }</block>
                                </then>
                            </if>
                                <if>if <condition>(<expr>
                                    <call>
                                        <name>
                                            <name>caps</name>
                                            <operator>.</operator>
                                            <name>getCapability</name>
                                        </name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <name>LOG_LEVEL</name>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                    <operator>!=</operator>
                                    <literal type="null">null</literal>
                                </expr>)</condition>
                                    <then>
                                        <block>{        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name>
                                                <init>= <expr>
                                                    <operator>(</operator>
                                                    <name>String</name>
                                                    <operator>)</operator>
                                                    <call>
                                                        <name>
                                                            <name>caps</name>
                                                            <operator>.</operator>
                                                            <name>getCapability</name>
                                                        </name>
                                                        <argument_list>(<argument>
                                                            <expr>
                                                                <name>LOG_LEVEL</name>
                                                            </expr>
                                                        </argument>)</argument_list>
                                                    </call>
                                                </expr>
                                                </init>
                                            </decl>;</decl_stmt>
                                            <if>if <condition>(<expr>
                                                <name>value</name>
                                                <operator>!=</operator>
                                                <literal type="null">null</literal>
                                            </expr>)</condition>
                                                <then>
                                                    <block>{          <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>
                                                                    <name>builder</name>
                                                                    <operator>.</operator>
                                                                    <name>withLogLevel</name>
                                                                </name>
                                                                <argument_list>(<argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>
                                                                                <name>InternetExplorerDriverLogLevel</name>
                                                                                <operator>.</operator>
                                                                                <name>valueOf</name>
                                                                            </name>
                                                                            <argument_list>(<argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>)</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>)</argument_list>
                                                            </call>
                                                        </expr>;</expr_stmt>        }</block>
                                                </then>
                                            </if>      }</block>
                                    </then>
                                </if>
                                <if>if <condition>(<expr>
                                    <call>
                                        <name>
                                            <name>caps</name>
                                            <operator>.</operator>
                                            <name>getCapability</name>
                                        </name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <name>HOST</name>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                    <operator>!=</operator>
                                    <literal type="null">null</literal>
                                </expr>)</condition>
                                    <then>
                                        <block>{        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name>
                                                <init>= <expr>
                                                    <operator>(</operator>
                                                    <name>String</name>
                                                    <operator>)</operator>
                                                    <call>
                                                        <name>
                                                            <name>caps</name>
                                                            <operator>.</operator>
                                                            <name>getCapability</name>
                                                        </name>
                                                        <argument_list>(<argument>
                                                            <expr>
                                                                <name>HOST</name>
                                                            </expr>
                                                        </argument>)</argument_list>
                                                    </call>
                                                </expr>
                                                </init>
                                            </decl>;</decl_stmt>
                                            <if>if <condition>(<expr>
                                                <name>value</name>
                                                <operator>!=</operator>
                                                <literal type="null">null</literal>
                                            </expr>)</condition>
                                                <then>
                                                    <block>{          <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>
                                                                    <name>builder</name>
                                                                    <operator>.</operator>
                                                                    <name>withHost</name>
                                                                </name>
                                                                <argument_list>(<argument>
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                </argument>)</argument_list>
                                                            </call>
                                                        </expr>;</expr_stmt>        }</block>
                                                </then>
                                            </if>      }</block>
                                    </then>
                                </if>
                                <if>if <condition>(<expr>
                                    <call>
                                        <name>
                                            <name>caps</name>
                                            <operator>.</operator>
                                            <name>getCapability</name>
                                        </name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <name>EXTRACT_PATH</name>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                    <operator>!=</operator>
                                    <literal type="null">null</literal>
                                </expr>)</condition>
                                    <then>
                                        <block>{        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name>
                                                <init>= <expr>
                                                    <operator>(</operator>
                                                    <name>String</name>
                                                    <operator>)</operator>
                                                    <call>
                                                        <name>
                                                            <name>caps</name>
                                                            <operator>.</operator>
                                                            <name>getCapability</name>
                                                        </name>
                                                        <argument_list>(<argument>
                                                            <expr>
                                                                <name>EXTRACT_PATH</name>
                                                            </expr>
                                                        </argument>)</argument_list>
                                                    </call>
                                                </expr>
                                                </init>
                                            </decl>;</decl_stmt>
                                            <if>if <condition>(<expr>
                                                <name>value</name>
                                                <operator>!=</operator>
                                                <literal type="null">null</literal>
                                            </expr>)</condition>
                                                <then>
                                                    <block>{          <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>
                                                                    <name>builder</name>
                                                                    <operator>.</operator>
                                                                    <name>withExtractPath</name>
                                                                </name>
                                                                <argument_list>(<argument>
                                                                    <expr>
                                                                        <operator>new</operator>
                                                                        <call>
                                                                            <name>File</name>
                                                                            <argument_list>(<argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>)</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>)</argument_list>
                                                            </call>
                                                        </expr>;</expr_stmt>        }</block>
                                                </then>
                                            </if>      }</block>
                                    </then>
                                </if>
                                <if>if <condition>(<expr>
                                    <call>
                                        <name>
                                            <name>caps</name>
                                            <operator>.</operator>
                                            <name>getCapability</name>
                                        </name>
                                        <argument_list>(<argument>
                                            <expr>
                                                <name>SILENT</name>
                                            </expr>
                                        </argument>)</argument_list>
                                    </call>
                                    <operator>!=</operator>
                                    <literal type="null">null</literal>
                                </expr>)</condition>
                                    <then>
                                        <block>{        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Boolean</name>
                                                </type>
                                                <name>value</name>
                                                <init>= <expr>
                                                    <operator>(</operator>
                                                    <name>Boolean</name>
                                                    <operator>)</operator>
                                                    <call>
                                                        <name>
                                                            <name>caps</name>
                                                            <operator>.</operator>
                                                            <name>getCapability</name>
                                                        </name>
                                                        <argument_list>(<argument>
                                                            <expr>
                                                                <name>SILENT</name>
                                                            </expr>
                                                        </argument>)</argument_list>
                                                    </call>
                                                </expr>
                                                </init>
                                            </decl>;</decl_stmt>
                                            <if>if <condition>(<expr>
                                                <name>value</name>
                                                <operator>!=</operator>
                                                <literal type="null">null</literal>
                                            </expr>)</condition>
                                                <then>
                                                    <block>{          <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>
                                                                    <name>builder</name>
                                                                    <operator>.</operator>
                                                                    <name>withSilent</name>
                                                                </name>
                                                                <argument_list>(<argument>
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                </argument>)</argument_list>
                                                            </call>
                                                        </expr>;</expr_stmt>        }</block>
                                                </then>
                                            </if>      }</block>
                                    </then>
                                </if>    }</block>
                        </then>
                    </if>
                    <return>return <expr>
                        <call>
                            <name>
                                <name>builder</name>
                                <operator>.</operator>
                                <name>build</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>;</return>  }</block>
            </function>}</block>
    </class>
    <class>
    <specifier>public</specifier> class <name>ExpectedConditions</name>
    <block>{  <decl_stmt>
    <decl>
        <specifier>private</specifier>
        <type>
            <specifier>final</specifier>
            <specifier>static</specifier>
            <name>Logger</name>
        </type>
        <name>log</name>
        <init>= <expr>
            <call>
                <name>
                    <name>Logger</name>
                    <operator>.</operator>
                    <name>getLogger</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                        <call>
                            <name>
                                <name>ExpectedConditions</name>
                                <operator>.</operator>
                                <name>
                                    <name>class</name>
                                    <operator>.</operator>
                                    <name>getName</name>
                                </name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                </argument>)</argument_list>
            </call>
        </expr>
        </init>
    </decl>;</decl_stmt>
    <constructor>
        <specifier>private</specifier>
        <name>ExpectedConditions</name>
        <parameter_list>()</parameter_list>
        <block>{    <comment type="line">// Utility class</comment>  }</block>
    </constructor>
    <comment type="block" format="javadoc">/**   * An expectation for checking the title of a page.   *   * @param title the expected title, which must be an exact match   * @return true when the title matches, false otherwise   */</comment>
    <function>
        <specifier>public</specifier>
        <specifier>static</specifier>
        <type>
            <name>
                <name>ExpectedCondition</name>
                <argument_list type="generic">&lt;<argument>
                    <name>Boolean</name>
                </argument>&gt;</argument_list>
            </name>
        </type>
        <name>titleIs</name>
        <parameter_list>(<parameter>
            <decl>
                <type>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>title</name>
            </decl>
        </parameter>)</parameter_list>
        <block>{    <return>return <expr>
            <operator>new</operator>
            <class>
                <super>
                    <name>
                        <name>ExpectedCondition</name>
                        <argument_list type="generic">&lt;<argument>
                            <name>Boolean</name>
                        </argument>&gt;</argument_list>
                    </name>
                </super>
                <argument_list>()</argument_list>
                <block>{      <decl_stmt>
                    <decl>
                        <specifier>private</specifier>
                        <type>
                            <name>String</name>
                        </type>
                        <name>currentTitle</name>
                        <init>= <expr>
                            <literal type="string">""</literal>
                        </expr>
                        </init>
                    </decl>;</decl_stmt>
                    <function>
                        <annotation>@<name>Override</name>
                        </annotation>
                        <specifier>public</specifier>
                        <type>
                            <name>Boolean</name>
                        </type>
                        <name>apply</name>
                        <parameter_list>(<parameter>
                            <decl>
                                <type>
                                    <name>WebDriver</name>
                                </type>
                                <name>driver</name>
                            </decl>
                        </parameter>)</parameter_list>
                        <block>{        <expr_stmt>
                            <expr>
                                <name>currentTitle</name>
                                <operator>=</operator>
                                <call>
                                    <name>
                                        <name>driver</name>
                                        <operator>.</operator>
                                        <name>getTitle</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>;</expr_stmt>
                            <return>return <expr>
                                <call>
                                    <name>
                                        <name>title</name>
                                        <operator>.</operator>
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(<argument>
                                        <expr>
                                            <name>currentTitle</name>
                                        </expr>
                                    </argument>)</argument_list>
                                </call>
                            </expr>;</return>      }</block>
                    </function>
                    <function>
                        <annotation>@<name>Override</name>
                        </annotation>
                        <specifier>public</specifier>
                        <type>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{        <return>return <expr>
                            <call>
                                <name>
                                    <name>String</name>
                                    <operator>.</operator>
                                    <name>format</name>
                                </name>
                                <argument_list>(<argument>
                                    <expr>
                                        <literal type="string">"title to be \"%s\". Current title: \"%s\""</literal>
                                    </expr>
                                </argument>, <argument>
                                    <expr>
                                        <name>title</name>
                                    </expr>
                                </argument>, <argument>
                                    <expr>
                                        <name>currentTitle</name>
                                    </expr>
                                </argument>)</argument_list>
                            </call>
                        </expr>;</return>      }</block>
                    </function>    }</block>
            </class>
        </expr>;</return>  }</block>
    </function>
    }</block>
    </class>
</root>