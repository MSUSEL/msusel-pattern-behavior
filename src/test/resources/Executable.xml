<?xml version="1.0" encoding="UTF-8" standalone="yes"?><unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Derek Reimanis\Documents\research\behavior\projects\selenium\36-src\selenium-3.6\org\openqa\selenium\firefox\internal\Executable.java"><comment type="line">// Licensed to the Software Freedom Conservancy (SFC) under one</comment><comment type="line">// or more contributor license agreements.  See the NOTICE file</comment><comment type="line">// distributed with this work for additional information</comment><comment type="line">// regarding copyright ownership.  The SFC licenses this file</comment><comment type="line">// to you under the Apache License, Version 2.0 (the</comment><comment type="line">// "License"); you may not use this file except in compliance</comment><comment type="line">// with the License.  You may obtain a copy of the License at</comment><comment type="line">//</comment><comment type="line">//   http://www.apache.org/licenses/LICENSE-2.0</comment><comment type="line">//</comment><comment type="line">// Unless required by applicable law or agreed to in writing,</comment><comment type="line">// software distributed under the License is distributed on an</comment><comment type="line">// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</comment><comment type="line">// KIND, either express or implied.  See the License for the</comment><comment type="line">// specific language governing permissions and limitations</comment><comment type="line">// under the License.</comment><package>package <name><name>org</name><operator>.</operator><name>openqa</name><operator>.</operator><name>selenium</name><operator>.</operator><name>firefox</name><operator>.</operator><name>internal</name></name>;</package><import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import><import>import <name><name>org</name><operator>.</operator><name>openqa</name><operator>.</operator><name>selenium</name><operator>.</operator><name>Platform</name></name>;</import><import>import <name><name>org</name><operator>.</operator><name>openqa</name><operator>.</operator><name>selenium</name><operator>.</operator><name>WebDriverException</name></name>;</import><import>import <name><name>org</name><operator>.</operator><name>openqa</name><operator>.</operator><name>selenium</name><operator>.</operator><name>firefox</name><operator>.</operator><name>FirefoxBinary</name></name>;</import><import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import><import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import><import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import><import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import><import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import><comment type="block" format="javadoc">/** * Wrapper around Firefox executable. */</comment><class><specifier>public</specifier> class <name>Executable</name> <block>{  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>binary</name></decl>;</decl_stmt>  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>version</name></decl>;</decl_stmt>  <decl_stmt><decl><specifier>private</specifier> <type><name><name>FirefoxBinary</name><operator>.</operator><name>Channel</name></name></type> <name>channel</name></decl>;</decl_stmt>  <constructor><specifier>public</specifier> <name>Executable</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>userSpecifiedBinaryPath</name></decl></parameter>)</parameter_list> <block>{    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><name>userSpecifiedBinaryPath</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>,                             <argument><expr><literal type="string">"Path to the firefox binary should not be null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><call><name><name>userSpecifiedBinaryPath</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>userSpecifiedBinaryPath</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>,                             <argument><expr><literal type="string">"Specified firefox binary location does not exist or is not a real file: "</literal> <operator>+</operator>                             <name>userSpecifiedBinaryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><name>binary</name> <operator>=</operator> <name>userSpecifiedBinaryPath</name></expr>;</expr_stmt>  }</block></constructor>  <function><specifier>public</specifier> <type><name>File</name></type> <name>getDirectory</name><parameter_list>()</parameter_list> <block>{    <return>return <expr><call><name><name>binary</name><operator>.</operator><name>getAbsoluteFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call></expr>;</return>  }</block></function>  <function><specifier>public</specifier> <type><name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{    <return>return <expr><name>binary</name></expr>;</return>  }</block></function>  <function><specifier>public</specifier> <type><name>String</name></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{    <return>return <expr><call><name><name>binary</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>  }</block></function>  <function><specifier>public</specifier> <type><name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{    <if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{      <expr_stmt><expr><call><name>loadApplicationIni</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    }</block></then></if>    <return>return <expr><name>version</name></expr>;</return>  }</block></function>  <function><specifier>public</specifier> <type><name><name>FirefoxBinary</name><operator>.</operator><name>Channel</name></name></type> <name>getChannel</name><parameter_list>()</parameter_list> <block>{    <if>if <condition>(<expr><name>channel</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{      <expr_stmt><expr><call><name>loadChannelPref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    }</block></then></if>    <return>return <expr><name>channel</name></expr>;</return>  }</block></function>  <function><specifier>private</specifier> <type><name>void</name></type> <name>loadApplicationIni</name><parameter_list>()</parameter_list> <block>{    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>applicationIni</name> <init>= <expr><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"application.ini"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    <if>if <condition>(<expr><call><name><name>applicationIni</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{      <try>try <init>(<decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>newBufferedReader</name></name><argument_list>(<argument><expr><call><name><name>applicationIni</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>lines</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>String</name><operator>::</operator><name>trim</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>line</name></decl></parameter></parameter_list> -&gt; <block>{          <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"Version="</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{            <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="string">"Version="</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>          }</block></then></if>        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>      }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{        <throw>throw <expr><operator>new</operator> <call><name>WebDriverException</name><argument_list>(<argument><expr><literal type="string">"Cannot get version info for of Firefox binary "</literal> <operator>+</operator> <name>binary</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>      }</block></catch>      <return>return;</return>    }</block></then></if>    <comment type="line">// Set version to something with a ridiculously high number.</comment>    <expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="string">"1000.0 unknown"</literal></expr>;</expr_stmt>  }</block></function>  <function><specifier>private</specifier> <type><name>void</name></type> <name>loadChannelPref</name><parameter_list>()</parameter_list> <block>{    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>channelPrefs</name> <init>= <expr><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"defaults/pref/channel-prefs.js"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    <if>if <condition>(<expr><call><name><name>channelPrefs</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{      <try>try <init>(<decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>newBufferedReader</name></name><argument_list>(<argument><expr><call><name><name>channelPrefs</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>lines</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>String</name><operator>::</operator><name>trim</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>line</name></decl></parameter></parameter_list> -&gt; <block>{          <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"pref("</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{            <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name><name>FirefoxBinary</name><operator>.</operator><name>Channel</name><operator>.</operator><name>fromString</name></name><argument_list>(                <argument><expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="string">"pref(\"app.update.channel\", \""</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>,                               <argument><expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="string">"\");"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>          }</block></then></if>        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>      }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{        <throw>throw <expr><operator>new</operator> <call><name>WebDriverException</name><argument_list>(<argument><expr><literal type="string">"Cannot get channel info for Firefox binary "</literal> <operator>+</operator> <name>binary</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>      }</block></catch>      <return>return;</return>    }</block></then></if>    <comment type="line">// Pick a sane default</comment>    <expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>FirefoxBinary</name><operator>.</operator><name>Channel</name><operator>.</operator><name>RELEASE</name></name></expr>;</expr_stmt>  }</block></function>  <function><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>getResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>resourceName</name></decl></parameter>)</parameter_list> <block>{    <decl_stmt><decl><type><name>Path</name></type> <name>binaryLocation</name> <init>= <expr><call><name><name>binary</name><operator>.</operator><name>getAbsoluteFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>    <decl_stmt><decl><type><name>Path</name></type> <name>discovered</name></decl>;</decl_stmt>    <if>if <condition>(<expr><call><name><name>Platform</name><operator>.</operator><name>getCurrent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>is</name><argument_list>(<argument><expr><name><name>Platform</name><operator>.</operator><name>MAC</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{      <expr_stmt><expr><name>discovered</name> <operator>=</operator> <call><name><name>binaryLocation</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><literal type="string">"Resources"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    }</block></then> <else>else <block>{      <expr_stmt><expr><name>discovered</name> <operator>=</operator> <call><name><name>binaryLocation</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    }</block></else></if>    <if>if <condition>(<expr><call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>discovered</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>discovered</name></expr></argument>)</argument_list></call></expr>;</return>    }</block></then></if>    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>  }</block></function>}</block></class></unit>